{"variants":[{"paths":["\/documentation\/niocore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","interfaceLanguage":"swift"},"sections":[],"metadata":{"externalID":"NIOCore","roleHeading":"Framework","role":"collection","modules":[{"name":"NIOCore"}],"title":"NIOCore","symbolKind":"module"},"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteEncoder":{"url":"\/documentation\/niocore\/messagetobyteencoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteEncoder"}],"type":"topic","role":"symbol","abstract":[{"text":"A protocol for straightforward encoders which encode custom messages to ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"s.","type":"text"},{"text":" ","type":"text"},{"text":"To add a ","type":"text"},{"code":"MessageToByteEncoder","type":"codeVoice"},{"text":" to a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":", use","type":"text"},{"text":" ","type":"text"},{"code":"channel.pipeline.addHandler(MessageToByteHandler(myEncoder)","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MessageToByteEncoder"}],"kind":"symbol","title":"MessageToByteEncoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":".","type":"text"}],"role":"symbol","title":"ChannelOutboundHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"title":"ByteBufferAllocator","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","role":"symbol","navigatorTitle":[{"text":"ByteBufferAllocator","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferAllocator","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAttemptedToRemoveHandlerMultipleTimesError":{"navigatorTitle":[{"kind":"identifier","text":"NIOAttemptedToRemoveHandlerMultipleTimesError"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAttemptedToRemoveHandlerMultipleTimesError"}],"title":"NIOAttemptedToRemoveHandlerMultipleTimesError","url":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","abstract":[{"type":"text","text":"The removal of a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" using "},{"type":"codeVoice","code":"ChannelPipeline.removeHandler"},{"type":"text","text":" has been attempted more than once."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MulticastChannel":{"url":"\/documentation\/niocore\/multicastchannel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MulticastChannel"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","navigatorTitle":[{"kind":"identifier","text":"MulticastChannel"}],"title":"MulticastChannel","abstract":[{"type":"text","text":"A "},{"code":"MulticastChannel","type":"codeVoice"},{"type":"text","text":" is a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that supports IP multicast operations: that is, a channel that can join multicast"},{"type":"text","text":" "},{"type":"text","text":"groups."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"url":"\/documentation\/niocore\/channelhandler","role":"symbol","title":"ChannelHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInvoker":{"abstract":[{"type":"text","text":"A protocol that signals that outbound and inbound events are triggered by this invoker."}],"role":"symbol","title":"ChannelInvoker","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","url":"\/documentation\/niocore\/channelinvoker","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInvoker"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInvoker"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MaxMessagesPerReadOption":{"navigatorTitle":[{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"url":"\/documentation\/niocore\/maxmessagesperreadoption","type":"topic","deprecated":true,"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","title":"MaxMessagesPerReadOption","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"type":"topic","title":"NIOSingleStepByteToMessageProcessor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":" uses a "},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelError":{"type":"topic","navigatorTitle":[{"text":"ChannelError","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","title":"ChannelError","role":"symbol","url":"\/documentation\/niocore\/channelerror","kind":"symbol","abstract":[{"text":"An error that can occur on ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" operations.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOption":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOption","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/channeloption","abstract":[{"text":"A configuration option that can be set on a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" to configure different behaviour.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","title":"ChannelOption","kind":"symbol","navigatorTitle":[{"text":"ChannelOption","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopError":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","url":"\/documentation\/niocore\/eventlooperror","abstract":[{"type":"text","text":"Different "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"s that are specific to "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" operations \/ implementations."}],"navigatorTitle":[{"text":"EventLoopError","kind":"identifier"}],"title":"EventLoopError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopError","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionName":{"url":"\/documentation\/niocore\/socketoptionname","title":"SocketOptionName","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionName","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOptionName","kind":"identifier"}],"type":"topic","abstract":[],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"title":"NIOAny","type":"topic","url":"\/documentation\/niocore\/nioany","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOData":{"role":"symbol","abstract":[{"code":"IOData","type":"codeVoice"},{"type":"text","text":" unifies standard SwiftNIO types that are raw bytes of data; currently "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOData"}],"url":"\/documentation\/niocore\/iodata","type":"topic","title":"IOData","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IOData"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"navigatorTitle":[{"kind":"identifier","text":"NIOEventLoopGroupProvider"}],"type":"topic","title":"NIOEventLoopGroupProvider","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOEventLoopGroupProvider"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","abstract":[{"text":"This type is intended to be used by libraries which use NIO, and offer their users either the option","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"code":".share","type":"codeVoice"},{"text":" an existing event loop group or create (and manage) a new one (","type":"text"},{"code":".createNew","type":"codeVoice"},{"text":") and let it be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"managed by given library and its lifecycle."}],"role":"symbol","url":"\/documentation\/niocore\/nioeventloopgroupprovider","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdleStateHandler"}],"type":"topic","kind":"symbol","abstract":[{"text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.","type":"text"}],"role":"symbol","title":"IdleStateHandler","url":"\/documentation\/niocore\/idlestatehandler","navigatorTitle":[{"kind":"identifier","text":"IdleStateHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvByteBufferAllocator":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvByteBufferAllocator","kind":"identifier"}],"url":"\/documentation\/niocore\/recvbytebufferallocator","title":"RecvByteBufferAllocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","type":"topic","navigatorTitle":[{"text":"RecvByteBufferAllocator","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Allocates ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"s to be used to read bytes from a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" and records the number of the actual bytes that were used.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkDevice":{"abstract":[{"text":"A representation of a single network device on a system.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIONetworkDevice","kind":"identifier"}],"type":"topic","title":"NIONetworkDevice","role":"symbol","url":"\/documentation\/niocore\/nionetworkdevice","navigatorTitle":[{"text":"NIONetworkDevice","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotImplementedError":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOMulticastNotImplementedError"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOMulticastNotImplementedError"}],"title":"NIOMulticastNotImplementedError","role":"symbol","abstract":[{"type":"text","text":"Multicast has not been properly implemented on this channel."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","type":"topic","url":"\/documentation\/niocore\/niomulticastnotimplementederror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","type":"topic","title":"EventLoopGroup","role":"symbol","url":"\/documentation\/niocore\/eventloopgroup"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","abstract":[{"type":"text","text":"A "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","type":"topic","role":"symbol","url":"\/documentation\/niocore\/channel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoderError":{"type":"topic","role":"symbol","url":"\/documentation\/niocore\/bytetomessagedecodererror","abstract":[{"text":"Common errors thrown by ","type":"text"},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"text":"s.","type":"text"}],"navigatorTitle":[{"text":"ByteToMessageDecoderError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoderError","kind":"identifier"}],"kind":"symbol","title":"ByteToMessageDecoderError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AddressedEnvelope":{"type":"topic","abstract":[{"text":"A data structure for processing addressed datagrams, such as those used by UDP.","type":"text"}],"navigatorTitle":[{"text":"AddressedEnvelope","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AddressedEnvelope","kind":"identifier"}],"url":"\/documentation\/niocore\/addressedenvelope","title":"AddressedEnvelope"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSynchronousChannelOptions":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","navigatorTitle":[{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"role":"symbol","title":"NIOSynchronousChannelOptions","type":"topic","url":"\/documentation\/niocore\/niosynchronouschanneloptions","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"url":"\/documentation\/niocore\/channelinboundhandler","role":"symbol","title":"ChannelInboundHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles inbound I\/O events for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOExplicitCongestionNotificationState":{"url":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOExplicitCongestionNotificationState"}],"title":"NIOExplicitCongestionNotificationState","abstract":[{"type":"text","text":"Possible Explicit Congestion Notification States"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","navigatorTitle":[{"kind":"identifier","text":"NIOExplicitCongestionNotificationState"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddressError":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","url":"\/documentation\/niocore\/socketaddresserror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddressError","kind":"identifier"}],"navigatorTitle":[{"text":"SocketAddressError","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Special ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" that may be thrown if we fail to create a ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","title":"SocketAddressError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FixedSizeRecvByteBufferAllocator":{"title":"FixedSizeRecvByteBufferAllocator","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","url":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator","navigatorTitle":[{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}],"type":"topic","abstract":[{"type":"codeVoice","code":"RecvByteBufferAllocator"},{"type":"text","text":" which will always return a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with the same fixed size no matter what was recorded."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelEvent":{"url":"\/documentation\/niocore\/channelevent","kind":"symbol","abstract":[{"type":"text","text":"An "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" related event that is passed through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" to notify the user."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelEvent"}],"title":"ChannelEvent","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelEvent"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CloseMode":{"title":"CloseMode","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CloseMode"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","url":"\/documentation\/niocore\/closemode","abstract":[{"type":"text","text":"Specify what kind of close operation is requested."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CloseMode"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MarkedCircularBuffer":{"title":"MarkedCircularBuffer","abstract":[{"type":"text","text":"A circular buffer that allows one object at a time to be “marked” and easily identified and retrieved later."}],"navigatorTitle":[{"kind":"identifier","text":"MarkedCircularBuffer"}],"url":"\/documentation\/niocore\/markedcircularbuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkedCircularBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Scheduled":{"url":"\/documentation\/niocore\/scheduled","navigatorTitle":[{"kind":"identifier","text":"Scheduled"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scheduled"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","title":"Scheduled","abstract":[{"text":"Returned once a task was scheduled on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" for later execution.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"abstract":[{"type":"text","text":"A list of "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s that handle or intercept inbound events and outbound operations of a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":". "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" implements an advanced form of the Intercepting Filter pattern"},{"type":"text","text":" "},{"type":"text","text":"to give a user full control over how an event is handled and how the "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s in a pipeline"},{"type":"text","text":" "},{"type":"text","text":"interact with each other."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelPipeline"}],"title":"ChannelPipeline","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipeline"}],"role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkInterface":{"title":"NIONetworkInterface","url":"\/documentation\/niocore\/nionetworkinterface","role":"symbol","deprecated":true,"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIONetworkInterface"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A representation of a single network interface on a system."}],"navigatorTitle":[{"kind":"identifier","text":"NIONetworkInterface"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopIterator":{"title":"EventLoopIterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopIterator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","navigatorTitle":[{"kind":"identifier","text":"EventLoopIterator"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopiterator","role":"symbol","abstract":[{"type":"text","text":"An iterator over the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s forming an "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/circularbuffer","abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, it’s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"abstract":[{"text":"A ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" is a handle to an open file.","type":"text"}],"title":"NIOFileHandle","url":"\/documentation\/niocore\/niofilehandle","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","role":"symbol","navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"navigatorTitle":[{"kind":"identifier","text":"NIOClientTCPBootstrapProtocol"}],"title":"NIOClientTCPBootstrapProtocol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"type":"text","text":" is implemented by various underlying transport mechanisms. Typically,"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"code":"ClientBootstrap","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","type":"topic","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrapProtocol"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOInsecureNoTLS":{"navigatorTitle":[{"text":"NIOInsecureNoTLS","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol","role":"symbol","title":"NIOInsecureNoTLS","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOInsecureNoTLS","kind":"identifier"}],"url":"\/documentation\/niocore\/nioinsecurenotls"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/System":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"System","kind":"identifier"}],"type":"topic","title":"System","role":"symbol","url":"\/documentation\/niocore\/system","navigatorTitle":[{"text":"System","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"title":"ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMarkOption":{"deprecated":true,"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteBufferWaterMarkOption","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/writebufferwatermarkoption","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","kind":"symbol","title":"WriteBufferWaterMarkOption","abstract":[],"navigatorTitle":[{"text":"WriteBufferWaterMarkOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ConnectTimeoutOption":{"title":"ConnectTimeoutOption","url":"\/documentation\/niocore\/connecttimeoutoption","navigatorTitle":[{"text":"ConnectTimeoutOption","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectTimeoutOption","kind":"identifier"}],"abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionValue":{"url":"\/documentation\/niocore\/socketoptionvalue","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionValue","kind":"identifier"}],"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","kind":"symbol","title":"SocketOptionValue","role":"symbol","navigatorTitle":[{"text":"SocketOptionValue","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelDuplexHandler":{"title":"ChannelDuplexHandler","role":"symbol","navigatorTitle":[{"text":"ChannelDuplexHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","kind":"symbol","url":"\/documentation\/niocore\/channelduplexhandler","abstract":[{"type":"text","text":"A combination of "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" and "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelDuplexHandler","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandlerContext.removeHandler"},{"type":"text","text":") as soon as possible."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"url":"\/documentation\/niocore\/removablechannelhandler","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"title":"RemovableChannelHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOptions":{"type":"topic","title":"ChannelOptions","kind":"symbol","abstract":[{"type":"text","text":"Provides "},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":"s to be used with a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" or "},{"code":"ServerBootstrap","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelOptions"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","role":"symbol","url":"\/documentation\/niocore\/channeloptions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOptions"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotSupportedError":{"title":"NIOMulticastNotSupportedError","role":"symbol","url":"\/documentation\/niocore\/niomulticastnotsupportederror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotSupportedError","kind":"identifier"}],"navigatorTitle":[{"text":"NIOMulticastNotSupportedError","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","abstract":[{"text":"Multicast is not supported on this interface.","type":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferView":{"url":"\/documentation\/niocore\/bytebufferview","navigatorTitle":[{"text":"ByteBufferView","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferView","kind":"identifier"}],"kind":"symbol","title":"ByteBufferView","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","abstract":[{"text":"A view into a portion of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"title":"MessageToByteHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MessageToByteHandler"}],"role":"symbol","url":"\/documentation\/niocore\/messagetobytehandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteHandler"}],"type":"topic","abstract":[{"type":"text","text":"A handler which turns a given "},{"type":"codeVoice","code":"MessageToByteEncoder"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipelineError":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipelineError"}],"kind":"symbol","type":"topic","role":"symbol","title":"ChannelPipelineError","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","abstract":[{"code":"Error","type":"codeVoice"},{"text":" that is used by the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" to inform the user of an error.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelPipelineError"}],"url":"\/documentation\/niocore\/channelpipelineerror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandlerContext":{"url":"\/documentation\/niocore\/channelhandlercontext","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandlerContext","kind":"identifier"}],"title":"ChannelHandlerContext","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Every "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" has – when added to a "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" – a corresponding "},{"code":"ChannelHandlerContext","type":"codeVoice"},{"type":"text","text":" which is"},{"type":"text","text":" "},{"type":"text","text":"the way "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s can interact with other "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s in the pipeline."}],"navigatorTitle":[{"text":"ChannelHandlerContext","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMark":{"role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteBufferWaterMark"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","title":"WriteBufferWaterMark","navigatorTitle":[{"kind":"identifier","text":"WriteBufferWaterMark"}],"kind":"symbol","url":"\/documentation\/niocore\/writebufferwatermark","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTLSProvider":{"navigatorTitle":[{"text":"NIOClientTLSProvider","kind":"identifier"}],"type":"topic","abstract":[],"role":"symbol","title":"NIOClientTLSProvider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","kind":"symbol","url":"\/documentation\/niocore\/nioclienttlsprovider","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTLSProvider","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Endianness":{"url":"\/documentation\/niocore\/endianness","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Endianness"}],"navigatorTitle":[{"kind":"identifier","text":"Endianness"}],"role":"symbol","title":"Endianness","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","kind":"symbol","abstract":[{"type":"text","text":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in"},{"type":"text","text":" "},{"type":"text","text":"memory or when transmitted over digital links."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionLevel":{"url":"\/documentation\/niocore\/socketoptionlevel","type":"topic","role":"symbol","navigatorTitle":[{"text":"SocketOptionLevel","kind":"identifier"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","title":"SocketOptionLevel","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionLevel","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllocatorOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AllocatorOption","kind":"identifier"}],"navigatorTitle":[{"text":"AllocatorOption","kind":"identifier"}],"abstract":[],"role":"symbol","url":"\/documentation\/niocore\/allocatoroption","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","title":"AllocatorOption","type":"topic","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOError":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOError"}],"title":"IOError","kind":"symbol","role":"symbol","abstract":[{"text":"An ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" for an IO operation.","type":"text"}],"url":"\/documentation\/niocore\/ioerror","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IOError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelShouldQuiesceEvent":{"navigatorTitle":[{"kind":"identifier","text":"ChannelShouldQuiesceEvent"}],"type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" user event that is sent when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has been asked to quiesce."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","url":"\/documentation\/niocore\/channelshouldquiesceevent","title":"ChannelShouldQuiesceEvent","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelShouldQuiesceEvent"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIODeadline":{"kind":"symbol","title":"NIODeadline","navigatorTitle":[{"text":"NIODeadline","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIODeadline","kind":"identifier"}],"url":"\/documentation\/niocore\/niodeadline","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a point in time."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AdaptiveRecvByteBufferAllocator":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"title":"AdaptiveRecvByteBufferAllocator","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will gracefully increment or decrement the buffer size on the feedback that was recorded.","type":"text"}],"url":"\/documentation\/niocore\/adaptiverecvbytebufferallocator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"type":"topic","url":"\/documentation\/niocore\/backpressurehandler","kind":"symbol","role":"symbol","title":"BackPressureHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddress":{"navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"SocketAddress","kind":"identifier"}],"url":"\/documentation\/niocore\/socketaddress","type":"topic","title":"SocketAddress","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AutoReadOption":{"deprecated":true,"url":"\/documentation\/niocore\/autoreadoption","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","navigatorTitle":[{"kind":"identifier","text":"AutoReadOption"}],"role":"symbol","title":"AutoReadOption","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoReadOption"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"kind":"symbol","navigatorTitle":[{"text":"AcceptBackoffHandler","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AcceptBackoffHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/acceptbackoffhandler","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that implements a backoff for a ","type":"text"},{"code":"ServerChannel","type":"codeVoice"},{"text":" when accept produces an ","type":"text"},{"code":"IOError","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These errors are often recoverable by reducing the rate at which we call accept.","type":"text"}],"title":"AcceptBackoffHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOCloseOnErrorHandler":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"title":"NIOCloseOnErrorHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","abstract":[{"text":"A ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that closes the channel when an error is caught","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"url":"\/documentation\/niocore\/niocloseonerrorhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DecodingState":{"title":"DecodingState","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DecodingState"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","navigatorTitle":[{"kind":"identifier","text":"DecodingState"}],"type":"topic","abstract":[{"text":"State of the current decoding process.","type":"text"}],"url":"\/documentation\/niocore\/decodingstate","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BacklogOption":{"navigatorTitle":[{"kind":"identifier","text":"BacklogOption"}],"url":"\/documentation\/niocore\/backlogoption","type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"BacklogOption"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","title":"BacklogOption","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","abstract":[{"type":"text","text":"A simplified version of "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":" that can generate zero or one messages for each invocation of "},{"code":"decode","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Having ","type":"text"},{"code":"decode","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" when returning. This allows for greatly simplified processing.","type":"text"}],"title":"NIOSingleStepByteToMessageDecoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"title":"EventLoop","url":"\/documentation\/niocore\/eventloop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionProvider":{"url":"\/documentation\/niocore\/socketoptionprovider","title":"SocketOptionProvider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionProvider","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOptionProvider","kind":"identifier"}],"type":"topic","abstract":[{"text":"This protocol defines an object, most commonly a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":", that supports","type":"text"},{"text":" ","type":"text"},{"text":"setting and getting socket options (via ","type":"text"},{"code":"setsockopt","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"getsockopt"},{"text":" or similar).","type":"text"},{"text":" ","type":"text"},{"text":"It provides a strongly typed API that makes working with larger, less-common","type":"text"},{"text":" ","type":"text"},{"text":"socket options easier than the ","type":"text"},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":" API allows."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundInvoker":{"title":"ChannelInboundInvoker","abstract":[{"type":"text","text":"Fire inbound events related to a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" until its end is reached or it’s consumed by a "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelInboundInvoker"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundInvoker"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","type":"topic","url":"\/documentation\/niocore\/channelinboundinvoker"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"role":"symbol","title":"FileRegion","url":"\/documentation\/niocore\/fileregion"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"role":"symbol","kind":"symbol","abstract":[{"text":"Allows users to invoke an “outbound” operation related to a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will flow through the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" until","type":"text"},{"text":" ","type":"text"},{"text":"it will finally be executed by the the ","type":"text"},{"type":"codeVoice","code":"ChannelCore"},{"text":" implementation.","type":"text"}],"navigatorTitle":[{"text":"ChannelOutboundInvoker","kind":"identifier"}],"url":"\/documentation\/niocore\/channeloutboundinvoker","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundInvoker","kind":"identifier"}],"title":"ChannelOutboundInvoker","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPacketInfo":{"abstract":[],"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPacketInfo","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","url":"\/documentation\/niocore\/niopacketinfo","navigatorTitle":[{"text":"NIOPacketInfo","kind":"identifier"}],"title":"NIOPacketInfo","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvAllocatorOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","navigatorTitle":[{"kind":"identifier","text":"RecvAllocatorOption"}],"deprecated":true,"kind":"symbol","url":"\/documentation\/niocore\/recvallocatoroption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecvAllocatorOption"}],"type":"topic","title":"RecvAllocatorOption","abstract":[],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOBSDSocket":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOBSDSocket"}],"url":"\/documentation\/niocore\/niobsdsocket","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOBSDSocket","kind":"identifier"}],"abstract":[],"type":"topic","title":"NIOBSDSocket","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOption":{"navigatorTitle":[{"text":"SocketOption","kind":"identifier"}],"type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"SocketOption","kind":"identifier"}],"title":"SocketOption","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","url":"\/documentation\/niocore\/socketoption","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RepeatedTask":{"abstract":[{"text":"Returned once a task was scheduled to be repeatedly executed on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask","title":"RepeatedTask","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/repeatedtask","navigatorTitle":[{"kind":"identifier","text":"RepeatedTask"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RepeatedTask"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoder":{"kind":"symbol","title":"ByteToMessageDecoder","role":"symbol","url":"\/documentation\/niocore\/bytetomessagedecoder","type":"topic","navigatorTitle":[{"text":"ByteToMessageDecoder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","abstract":[{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":"s decode bytes in a stream-like fashion from ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to another message type.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoder","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteObservingByteToMessageDecoder":{"kind":"symbol","title":"WriteObservingByteToMessageDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteObservingByteToMessageDecoder","kind":"identifier"}],"abstract":[{"type":"text","text":"Some "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s need to observe "},{"type":"codeVoice","code":"write"},{"type":"text","text":"s (which are outbound events). "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s which"},{"type":"text","text":" "},{"type":"text","text":"implement the "},{"type":"codeVoice","code":"WriteObservingByteToMessageDecoder"},{"text":" protocol will be notified about every outbound write.","type":"text"}],"url":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","role":"symbol","navigatorTitle":[{"text":"WriteObservingByteToMessageDecoder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","kind":"symbol","title":"NIOClientTCPBootstrap","url":"\/documentation\/niocore\/nioclienttcpbootstrap","role":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileDescriptor":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","url":"\/documentation\/niocore\/filedescriptor","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FileDescriptor"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileDescriptor"}],"type":"topic","abstract":[],"role":"symbol","title":"FileDescriptor"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteSpinOption":{"navigatorTitle":[{"kind":"identifier","text":"WriteSpinOption"}],"url":"\/documentation\/niocore\/writespinoption","type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteSpinOption"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption","title":"WriteSpinOption","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","title":"ChannelCore","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","kind":"symbol","abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"url":"\/documentation\/niocore\/channelcore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllowRemoteHalfClosureOption":{"navigatorTitle":[{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"url":"\/documentation\/niocore\/allowremotehalfclosureoption","type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","title":"AllowRemoteHalfClosureOption","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"abstract":[{"type":"text","text":"A promise to provide a result later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","navigatorTitle":[{"text":"EventLoopPromise","kind":"identifier"}],"title":"EventLoopPromise","type":"topic","url":"\/documentation\/niocore\/eventlooppromise","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"EventLoopPromise","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/TimeAmount":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"role":"symbol","title":"TimeAmount","type":"topic","url":"\/documentation\/niocore\/timeamount","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"text":"Represents a time ","type":"text"},{"inlineContent":[{"type":"text","text":"interval"}],"type":"emphasis"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"type":"topic","abstract":[{"text":"A handler which turns a given ","type":"text"},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/niocore\/bytetomessagehandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","title":"ByteToMessageHandler","navigatorTitle":[{"text":"ByteToMessageHandler","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramVectorReadMessageCountOption":{"navigatorTitle":[{"kind":"identifier","text":"DatagramVectorReadMessageCountOption"}],"url":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatagramVectorReadMessageCountOption"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","title":"DatagramVectorReadMessageCountOption","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSendable":{"type":"topic","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSendable","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","url":"\/documentation\/niocore\/niosendable","kind":"symbol","navigatorTitle":[{"text":"NIOSendable","kind":"identifier"}],"title":"NIOSendable","role":"symbol"}}}