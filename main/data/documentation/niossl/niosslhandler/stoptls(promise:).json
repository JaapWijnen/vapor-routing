{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niossl\/niosslhandler\/stoptls(promise:)"]}],"metadata":{"modules":[{"name":"NIOSSL"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stopTLS"},{"kind":"text","text":"("},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">?)"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"NIOSSL","externalID":"s:6NIOSSL13NIOSSLHandlerC7stopTLS7promisey7NIOCore16EventLoopPromiseVyytGSg_tF","title":"stopTLS(promise:)"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler\/stopTLS(promise:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Called to instruct this handler to perform an orderly TLS shutdown and then remove itself"},{"type":"text","text":" "},{"type":"text","text":"from the pipeline. This will leave the connection established, but remove the TLS wrapper"},{"type":"text","text":" "},{"type":"text","text":"from it."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stopTLS","kind":"identifier"},{"text":"(","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" that will be completed when the unwrapping has"},{"type":"text","text":" "},{"type":"text","text":"completed."}]}],"name":"promise"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"This will send a CLOSE_NOTIFY and wait for the corresponding CLOSE_NOTIFY. When that next"},{"type":"text","text":" "},{"type":"text","text":"CLOSE_NOTIFY is received, this handler will pass on all pending writes and remove itself"},{"type":"text","text":" "},{"type":"text","text":"from the channel pipeline. If the shutdown times out then an error will fire down the"},{"type":"text","text":" "},{"type":"text","text":"pipeline, this handler will remove itself from the pipeline, but the channel will not be"},{"type":"text","text":" "},{"type":"text","text":"automatically closed."}],"type":"paragraph"},{"inlineContent":[{"text":"This function ","type":"text"},{"inlineContent":[{"text":"is not thread-safe","type":"text"}],"type":"strong"},{"text":": you ","type":"text"},{"inlineContent":[{"text":"must","type":"text"}],"type":"strong"},{"text":" call it from the correct event","type":"text"},{"text":" ","type":"text"},{"text":"loop thread.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"abstract":[{"type":"text","text":"A promise to provide a result later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","navigatorTitle":[{"text":"EventLoopPromise","kind":"identifier"}],"title":"EventLoopPromise","type":"topic","url":"\/documentation\/niocore\/eventlooppromise","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"EventLoopPromise","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL":{"title":"NIOSSL","type":"topic","abstract":[],"role":"collection","url":"\/documentation\/niossl","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler/stopTLS(promise:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stopTLS"},{"kind":"text","text":"("},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">?)"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler\/stopTLS(promise:)","role":"symbol","url":"\/documentation\/niossl\/niosslhandler\/stoptls(promise:)","abstract":[{"type":"text","text":"Called to instruct this handler to perform an orderly TLS shutdown and then remove itself"},{"type":"text","text":" "},{"type":"text","text":"from the pipeline. This will leave the connection established, but remove the TLS wrapper"},{"type":"text","text":" "},{"type":"text","text":"from it."}],"type":"topic","title":"stopTLS(promise:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler":{"title":"NIOSSLHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSSLHandler"}],"role":"symbol","url":"\/documentation\/niossl\/niosslhandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLHandler"}],"type":"topic","abstract":[{"type":"text","text":"The base class for all NIOSSL handlers. This class cannot actually be instantiated by"},{"type":"text","text":" "},{"type":"text","text":"users directly: instead, users must select which mode they would like their handler to"},{"type":"text","text":" "},{"type":"text","text":"operate in, client or server."}]}}}