{"abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)"},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"platforms":["Linux"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The environment variable name"}]}],"name":"key"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":" handler provided by NIO","type":"text"}]}],"name":"fileIO"},{"content":[{"inlineContent":[{"text":"","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" for NIO to use for working with the file","type":"text"}],"type":"paragraph"}],"name":"eventLoop"}],"kind":"parameters"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example usage:"}]},{"syntax":null,"type":"codeListing","code":["func configure(_ app: Application) {","    \/\/ ...","","    let databasePassword = try Environment.secret(","        key: \"DATABASE_PASSWORD_FILE\",","        fileIO: app.fileio,","        on: app.eventLoopGroup.next()","    ).wait()",""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" use "},{"type":"codeVoice","code":".wait()"},{"type":"text","text":" if loading a secret at any time after the app has booted, such as while"},{"type":"text","text":" "},{"type":"text","text":"handling a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":". Chain the result as you would any other future instead."}]}],"style":"important"}],"kind":"content"}],"metadata":{"roleHeading":"Type Method","modules":[{"name":"Vapor"}],"externalID":"s:5Vapor11EnvironmentV6secret3key6fileIO2on7NIOCore15EventLoopFutureCySSSgGSS_8NIOPosix015NonBlockingFileF0VAH0iJ0_ptFZ","title":"secret(key:fileIO:on:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","text":"NonBlockingFileIO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?>"}],"extendedModule":"Vapor","symbolKind":"method","role":"symbol"},"variants":[{"paths":["\/documentation\/vapor\/environment\/secret(key:fileio:on:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"title":"NonBlockingFileIO","url":"\/documentation\/nioposix\/nonblockingfileio","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","role":"symbol","navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Environment"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Environment"}],"url":"\/documentation\/vapor\/environment","role":"symbol","abstract":[{"text":"The environment the application is running in, i.e., production, dev, etc. All ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":"s will have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" that can be used to dynamically register and configure services."}],"title":"Environment"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment/secret(key:fileIO:on:)":{"abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}],"kind":"symbol","url":"\/documentation\/vapor\/environment\/secret(key:fileio:on:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)","title":"secret(key:fileIO:on:)","type":"topic","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","kind":"typeIdentifier","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?>","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"title":"EventLoop","url":"\/documentation\/niocore\/eventloop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"url":"\/documentation\/vapor","role":"collection","kind":"symbol","title":"Vapor","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol"}}}