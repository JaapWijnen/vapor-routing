{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niosocks\/socksclienthandler"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/init(targetAddress:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelActive(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelRead(context:data:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/flush(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/handlerAdded(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/write(context:data:promise:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundOut","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundOut"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelInboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelOutboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/RemovableChannelHandler-Implementations"],"generated":true,"title":"Default Implementations"}],"abstract":[{"type":"text","text":"Connects to a SOCKS server to establish a proxied connection"},{"type":"text","text":" "},{"type":"text","text":"to a host. This handler should be inserted at the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified"},{"type":"text","text":" "},{"type":"text","text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets."}],"metadata":{"roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SOCKSClientHandler","kind":"identifier"}],"role":"symbol","title":"SOCKSClientHandler","symbolKind":"class","modules":[{"name":"NIOSOCKS"}],"externalID":"s:8NIOSOCKS18SOCKSClientHandlerC","navigatorTitle":[{"text":"SOCKSClientHandler","kind":"identifier"}]},"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS"]]},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler"],"title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SOCKSClientHandler","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/InboundOut":{"kind":"symbol","role":"symbol","url":"\/documentation\/niosocks\/socksclienthandler\/inboundout","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundOut","navigatorTitle":[{"kind":"identifier","text":"InboundOut"}],"title":"SOCKSClientHandler.InboundOut","abstract":[{"text":"The type of the inbound data which will be forwarded to the next ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandlerContext.removeHandler"},{"type":"text","text":") as soon as possible."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"url":"\/documentation\/niocore\/removablechannelhandler","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"title":"RemovableChannelHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/channelActive(context:)":{"title":"channelActive(context:)","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelActive(context:)","abstract":[{"type":"text","text":"Called when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has become active, and is able to send and receive data."}],"url":"\/documentation\/niosocks\/socksclienthandler\/channelactive(context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelActive"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"url":"\/documentation\/niocore\/channelhandler","role":"symbol","title":"ChannelHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/write(context:data:promise:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">?)"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/write(context:data:promise:)","abstract":[{"text":"Called to request a write operation. The write operation will write the messages through the","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":". Those are then ready to be flushed to the actual ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" when","type":"text"},{"text":" ","type":"text"},{"code":"Channel.flush","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ChannelHandlerContext.flush","type":"codeVoice"},{"text":" is called.","type":"text"}],"url":"\/documentation\/niosocks\/socksclienthandler\/write(context:data:promise:)","title":"write(context:data:promise:)","type":"topic","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelOutboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelOutboundHandler-Implementations","url":"\/documentation\/niosocks\/socksclienthandler\/channeloutboundhandler-implementations","type":"topic","abstract":[],"title":"ChannelOutboundHandler Implementations","kind":"article","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/flush(context:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/flush(context:)","url":"\/documentation\/niosocks\/socksclienthandler\/flush(context:)","type":"topic","abstract":[{"text":"Called to request that the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" flush all pending writes. The flush operation will try to flush out all previous written messages"},{"type":"text","text":" "},{"type":"text","text":"that are pending."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flush"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":")"}],"title":"flush(context:)","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":".","type":"text"}],"role":"symbol","title":"ChannelOutboundHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"url":"\/documentation\/niocore\/channelinboundhandler","role":"symbol","title":"ChannelInboundHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles inbound I\/O events for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/InboundIn":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundIn","url":"\/documentation\/niosocks\/socksclienthandler\/inboundin","type":"topic","abstract":[{"text":"The type of the inbound data which is wrapped in ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"InboundIn","kind":"identifier"}],"title":"SOCKSClientHandler.InboundIn","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"InboundIn","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/channelRead(context:data:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelRead(context:data:)","url":"\/documentation\/niosocks\/socksclienthandler\/channelread(context:data:)","type":"topic","abstract":[{"text":"Called when some data has been read from the remote peer.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"channelRead","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":")"}],"title":"channelRead(context:data:)","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SOCKSClientHandler"}],"navigatorTitle":[{"kind":"identifier","text":"SOCKSClientHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","title":"SOCKSClientHandler","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niosocks\/socksclienthandler","abstract":[{"type":"text","text":"Connects to a SOCKS server to establish a proxied connection"},{"type":"text","text":" "},{"type":"text","text":"to a host. This handler should be inserted at the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified"},{"type":"text","text":" "},{"type":"text","text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets."}]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelHandler-Implementations","title":"ChannelHandler Implementations","kind":"article","role":"collectionGroup","type":"topic","url":"\/documentation\/niosocks\/socksclienthandler\/channelhandler-implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/OutboundIn":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OutboundIn","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"OutboundIn","kind":"identifier"}],"abstract":[{"text":"The type of the outbound data which is wrapped in ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":".","type":"text"}],"kind":"symbol","title":"SOCKSClientHandler.OutboundIn","url":"\/documentation\/niosocks\/socksclienthandler\/outboundin"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/RemovableChannelHandler-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/RemovableChannelHandler-Implementations","type":"topic","abstract":[],"kind":"article","title":"RemovableChannelHandler Implementations","url":"\/documentation\/niosocks\/socksclienthandler\/removablechannelhandler-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/handlerAdded(context:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/handlerAdded(context:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"handlerAdded","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"text":"Called when this ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":" is added to the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"kind":"symbol","title":"handlerAdded(context:)","url":"\/documentation\/niosocks\/socksclienthandler\/handleradded(context:)"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/init(targetAddress:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/init(targetAddress:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"targetAddress"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOSOCKS12SOCKSAddressO","text":"SOCKSAddress"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Creates a new ","type":"text"},{"type":"codeVoice","code":"SOCKSClientHandler"},{"text":" that connects to a server","type":"text"},{"text":" ","type":"text"},{"text":"and instructs the server to connect to ","type":"text"},{"code":"targetAddress","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"init(targetAddress:)","url":"\/documentation\/niosocks\/socksclienthandler\/init(targetaddress:)"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/OutboundOut":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundOut","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"OutboundOut","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"OutboundOut","kind":"identifier"}],"abstract":[{"text":"The type of the outbound data which will be forwarded to the next ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"kind":"symbol","title":"SOCKSClientHandler.OutboundOut","url":"\/documentation\/niosocks\/socksclienthandler\/outboundout"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS","title":"NIOSOCKS","kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/niosocks","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelInboundHandler-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelInboundHandler-Implementations","type":"topic","abstract":[],"kind":"article","title":"ChannelInboundHandler Implementations","url":"\/documentation\/niosocks\/socksclienthandler\/channelinboundhandler-implementations"}}}