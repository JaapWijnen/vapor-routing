{"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith"},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"StartsWith","kind":"identifier"}],"title":"StartsWith","modules":[{"name":"Parsing"}],"symbolKind":"struct","roleHeading":"Structure","externalID":"s:7Parsing10StartsWithV","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:by:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/count","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/possiblePrefix","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/startsWith"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To","type":"conformsTo"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This parser is named after ","type":"text"},{"code":"Sequence.starts(with:)","type":"codeVoice"},{"text":", and tests that the input it is parsing","type":"text"},{"text":" ","type":"text"},{"text":"starts with a given subsequence by calling this method under the hood.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", it consumes this prefix and returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","StartsWith(\"Hello, \").parse(&input)  \/\/ ()","input                                \/\/ \"Blob!\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", it fails and leaves input intact:","type":"text"}]},{"type":"codeListing","code":["var input = \"Goodnight, Blob!\"[...]","try StartsWith(\"Hello, \").parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | Goodnight, Blob!","\/\/   | ^ expected \"Hello, \""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" the sequence of elements it consumes because the sequence"},{"type":"text","text":" "},{"type":"text","text":"is already known at the time the parser is created (it is the value quite literally passed to"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)","type":"reference","isActive":true},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"In many circumstances you can omit the ","type":"text"},{"code":"StartsWith","type":"codeVoice"},{"text":" parser entirely and just use the collection","type":"text"},{"text":" ","type":"text"},{"text":"as the parser. For example:","type":"text"}]},{"type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","try \"Hello, \".parse(&input)  \/\/ ()","input                        \/\/ \"Blob!\""],"syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/startswith"]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith":{"url":"\/documentation\/parsing\/startswith","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith","title":"StartsWith","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/count":{"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/count","kind":"symbol","title":"count","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/count"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/parse(_:)":{"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"text":"input.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/parse(_:)","kind":"symbol","title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/possiblePrefix":{"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/possiblePrefix","kind":"symbol","title":"possiblePrefix","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"possiblePrefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCollection","preciseIdentifier":"s:s13AnyCollectionV"},{"kind":"text","text":"<"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/possibleprefix"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol","title":"ParserPrinter","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","role":"symbol","kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/startsWith":{"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/startsWith","kind":"symbol","title":"startsWith","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"startsWith"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/startswith"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/ParserPrinter-Implementations":{"abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations","kind":"article","title":"ParserPrinter Implementations","type":"topic","url":"\/documentation\/parsing\/startswith\/parserprinter-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"role":"collection","abstract":[],"title":"Parsing","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/Parser-Implementations":{"title":"Parser Implementations","kind":"article","url":"\/documentation\/parsing\/startswith\/parser-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/Parser-Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/init(_:by:)":{"abstract":[{"type":"text","text":"Initializes a parser that successfully returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" when the initial elements of its input"},{"type":"text","text":" "},{"type":"text","text":"are equivalent to the elements in another sequence, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"equivalence test."}],"url":"\/documentation\/parsing\/startswith\/init(_:by:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":", "},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"type":"topic","title":"init(_:by:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:by:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/init(_:)":{"abstract":[{"type":"text","text":"Initializes a parser that successfully returns "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" when the initial elements of its input"},{"type":"text","text":" "},{"type":"text","text":"are equivalent to the elements in another sequence."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)","kind":"symbol","title":"init(_:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Input.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/init(_:)"}}}