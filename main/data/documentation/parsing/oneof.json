{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"Use this parser to list out a number of parsers in a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder","isActive":true,"type":"reference"},{"text":" result builder block.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following example uses ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","type":"reference"},{"text":" to parse an enum value. To do so, it spells out a list of","type":"text"},{"text":" ","type":"text"},{"text":"parsers to ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":", one for each case:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift"},{"inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"syntax":"swift"},{"inlineContent":[{"text":"If you are parsing input that should coalesce into some default, avoid using a final ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"parser, and instead opt for a trailing ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","type":"reference","isActive":true},{"text":", which returns a parser that","type":"text"},{"text":" ","type":"text"},{"text":"cannot fail:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Specificity","text":"Specificity"},{"inlineContent":[{"type":"text","text":"The order of the parsers in the above "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"type":"text","text":" does not matter because each of “€”, “£” and “$”"},{"type":"text","text":" "},{"type":"text","text":"are mutually exclusive, i.e. at most one will succeed on any given input."}],"type":"paragraph"},{"inlineContent":[{"text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple","type":"text"},{"text":" ","type":"text"},{"text":"can succeed on a given input) you must order them from most specific to least specific. That is,","type":"text"},{"text":" ","type":"text"},{"text":"the first parser should succeed on the fewest number of inputs and the last parser should","type":"text"},{"text":" ","type":"text"},{"text":"succeed on the most number of inputs.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of","type":"text"},{"text":" ","type":"text"},{"text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they","type":"text"},{"text":" ","type":"text"},{"text":"are quoted:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}],"type":"paragraph"},{"inlineContent":[{"text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only","type":"text"},{"text":" ","type":"text"},{"text":"if that fails we can parse a plain field that takes everything up until the next comma or","type":"text"},{"text":" ","type":"text"},{"text":"newline:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Running this parser on the input shows that it properly isolates each field of the CSV, even"},{"type":"text","text":" "},{"type":"text","text":"fields that are quoted and contain a comma:"}],"type":"paragraph"},{"type":"codeListing","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"syntax":"swift"},{"inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"type":"text","text":" specific parser in that it will succeed on fewer inputs"},{"type":"text","text":" "},{"type":"text","text":"than the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser does. For example:"}],"type":"paragraph"},{"type":"codeListing","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"syntax":"swift"},{"inlineContent":[{"text":"Whereas the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser will happily succeed on anything the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser will","type":"text"},{"text":" ","type":"text"},{"text":"succeed on:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"syntax":"swift"},{"inlineContent":[{"text":"For this reason the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser must be listed first so that it can try its logic","type":"text"},{"text":" ","type":"text"},{"text":"first, which succeeds less frequently, before then trying the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"succeeds more often.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Backtracking","text":"Backtracking"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},{"text":" parser is the primary tool for introducing backtracking into your parsers,","type":"text"},{"text":" ","type":"text"},{"text":"which means to undo the consumption of a parser when it fails. For more information, see the","type":"text"},{"text":" ","type":"text"},{"text":"article ","type":"text"},{"text":"doc:Backtracking","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"variants":[{"paths":["\/documentation\/parsing\/oneof"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"struct","externalID":"s:7Parsing5OneOfV","title":"OneOf","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Parsing"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","title":"OneOf","url":"\/documentation\/parsing\/oneof","role":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parse(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)","title":"parse(_:)","url":"\/documentation\/parsing\/oneof\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","role":"symbol","kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOfBuilder":{"title":"OneOfBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOfBuilder"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder","navigatorTitle":[{"kind":"identifier","text":"OneOfBuilder"}],"type":"topic","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs each parser in the closure, one after another, till one succeeds with an output.","type":"text"}],"url":"\/documentation\/parsing\/oneofbuilder","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parsers":{"abstract":[],"type":"topic","title":"parsers","url":"\/documentation\/parsing\/oneof\/parsers","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"text":"Parsers","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/Parser-Implementations":{"type":"topic","abstract":[],"kind":"article","url":"\/documentation\/parsing\/oneof\/parser-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","title":"Parser Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","role":"collectionGroup","abstract":[],"kind":"article","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"conformance":{"constraints":[{"code":"Parsers","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"ParserPrinter","type":"topic","url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","abstract":[{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"role":"collection","abstract":[],"title":"Parsing","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/init(_:)":{"role":"symbol","url":"\/documentation\/parsing\/oneof\/init(_:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"title":"init(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)","abstract":[],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always":{"title":"Always","type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","kind":"symbol","url":"\/documentation\/parsing\/always"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/replaceError(with:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","title":"replaceError(with:)","kind":"symbol","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)"}}}