{"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-3vq0d","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-7mnz8","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-87urg","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(with:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parsers"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/ParserPrinter-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse"},"metadata":{"symbolKind":"struct","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"externalID":"s:7Parsing5ParseV","modules":[{"name":"Parsing"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"title":"Parse","roleHeading":"Structure"},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A general entry point into "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax, which can be used to build complex parsers"},{"type":"text","text":" "},{"type":"text","text":"from simpler ones."}],"type":"paragraph"},{"syntax":"swift","code":["let point = Parse {","  \"(\"","  Int.parser()","  \",\"","  Int.parser()","  \")\"","}","","try point.parse(\"(2,-4)\")  \/\/ (2, -4)","","try point.parse(\"(42,blob)\")","\/\/ error: unexpected input","\/\/  --> input:1:5","\/\/ 1 | (42,blob)","\/\/   |     ^ expected integer"],"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"variants":[{"paths":["\/documentation\/parsing\/parse"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"role":"symbol","title":"Parse","type":"topic","url":"\/documentation\/parsing\/parse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/Parser-Implementations":{"abstract":[],"title":"Parser Implementations","type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/Parser-Implementations","url":"\/documentation\/parsing\/parse\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-7mnz8":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Downstream"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Downstream"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":")"}],"title":"init(_:with:)","abstract":[{"text":"A parser builder that bakes in a conversion of the tuple output.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-7mnz8","type":"topic","url":"\/documentation\/parsing\/parse\/init(_:with:)-7mnz8","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-87urg":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-87urg","abstract":[{"text":"A parser builder that replaces a void output with a given value.","type":"text"}],"title":"init(_:with:)","url":"\/documentation\/parsing\/parse\/init(_:with:)-87urg","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-3vq0d":{"type":"topic","abstract":[{"type":"text","text":"A parser builder that bakes in a transformation of the tuple output."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-3vq0d","url":"\/documentation\/parsing\/parse\/init(_:with:)-3vq0d","kind":"symbol","title":"init(_:with:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/parse(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parse(_:)","role":"symbol","title":"parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"url":"\/documentation\/parsing\/parse\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"conformance":{"constraints":[{"code":"Parsers","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"ParserPrinter","type":"topic","url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","abstract":[{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/parse\/parserprinter-implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/parsers":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parsers","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parsers","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/parse\/parsers","type":"topic","title":"parsers","abstract":[],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserBuilder":{"navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"title":"ParserBuilder","url":"\/documentation\/parsing\/parserbuilder"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","role":"symbol","kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(with:)":{"title":"init(with:)","role":"symbol","abstract":[{"text":"An entry point into ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","isActive":true,"type":"reference"},{"text":" syntax.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(with:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/parse\/init(with:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:)":{"conformance":{"constraints":[{"code":"Parsers","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","type":"topic","url":"\/documentation\/parsing\/parse\/init(_:)","title":"init(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:)","abstract":[],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Downstream","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Downstream","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"role":"collection","abstract":[],"title":"Parsing","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"}}}