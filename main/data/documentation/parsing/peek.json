{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"kind":"symbol","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","roleHeading":"Structure","title":"Peek","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"modules":[{"name":"Parsing"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"externalID":"s:7Parsing4PeekV"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"It lets the upstream parser “peek” into the input without consuming it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a","type":"text"},{"text":" ","type":"text"},{"text":"letter or underscore, but not a digit, but subsequent characters can be digits. ","type":"text"},{"inlineContent":[{"text":"E.g.","type":"text"}],"type":"emphasis"},{"text":", ","type":"text"},{"code":"foo123","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is a valid identifier, but ","type":"text"},{"code":"123foo","type":"codeVoice"},{"text":" is not. We can create an identifier parser by using ","type":"text"},{"code":"Peek","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to first check if the input starts with a letter or underscore, and if it does, return the","type":"text"},{"text":" ","type":"text"},{"text":"remainder of the input up to the first character that is not a letter, a digit, or an","type":"text"},{"text":" ","type":"text"},{"text":"underscore.","type":"text"}]},{"code":["let identifier = Parse {","  Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}","","try identifier.parse(\"foo123\") \/\/ ✅ \"foo123\"","try identifier.parse(\"_foo123\") \/\/ ✅ \"_foo123\"","try identifier.parse(\"1_foo123\") \/\/ ❌","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | 1_foo123","\/\/   | ^ expected 1 element satisfying predicate"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/peek"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/upstream"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/print(_:into:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations"],"generated":true,"title":"Default Implementations"}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol","url":"\/documentation\/parsing\/parserprinter","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"role":"collection","abstract":[],"title":"Parsing","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/print(_:into:)":{"abstract":[{"text":"Attempts to print a well-structured piece of data into something more nebulous.","type":"text"}],"kind":"symbol","role":"symbol","title":"print(_:into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"((), ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","url":"\/documentation\/parsing\/peek\/print(_:into:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/print(_:into:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","role":"symbol","kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/init(_:)":{"abstract":[{"text":"Construct a parser that runs the given parser, but does not consume any input.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/init(_:)","url":"\/documentation\/parsing\/peek\/init(_:)","title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/parse(_:)":{"url":"\/documentation\/parsing\/peek\/parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/parse(_:)","kind":"symbol","title":"parse(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/Parser-Implementations":{"type":"topic","kind":"article","role":"collectionGroup","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","url":"\/documentation\/parsing\/peek\/parser-implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}],"url":"\/documentation\/parsing\/peek","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"Peek","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/peek\/parserprinter-implementations","abstract":[],"kind":"article","role":"collectionGroup","title":"ParserPrinter Implementations","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Peek/upstream":{"kind":"symbol","abstract":[],"title":"upstream","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"upstream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Upstream"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Peek\/upstream","type":"topic","role":"symbol","url":"\/documentation\/parsing\/peek\/upstream"}}}