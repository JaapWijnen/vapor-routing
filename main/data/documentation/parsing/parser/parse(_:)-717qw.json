{"kind":"symbol","abstract":[{"text":"Parse an input value into an output. This method is more ergonomic to use than","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference","isActive":true},{"text":" because the input does not need to be inout.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"input","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"A more well-structured value parsed from the given input."}],"type":"paragraph"}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A nebulous piece of data to be parsed."}]}],"name":"input"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Rather than having to create a mutable input value and feed it to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},{"type":"text","text":" "},{"type":"text","text":"method like this:"}]},{"type":"codeListing","code":["var input = ...","let output = try parser.parse(&input)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can just feed the input directly:"}]},{"type":"codeListing","code":["let output = try parser.parse(input)"],"syntax":"swift"}]}],"metadata":{"roleHeading":"Instance Method","role":"symbol","extendedModule":"Parsing","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"modules":[{"name":"Parsing"}],"symbolKind":"method","title":"parse(_:)","externalID":"s:7Parsing6ParserPAAE5parsey6OutputQz5InputQzKF"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"]]},"variants":[{"paths":["\/documentation\/parsing\/parser\/parse(_:)-717qw"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-717qw"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-717qw":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-717qw","kind":"symbol","title":"parse(_:)","role":"symbol","type":"topic","url":"\/documentation\/parsing\/parser\/parse(_:)-717qw","abstract":[{"type":"text","text":"Parse an input value into an output. This method is more ergonomic to use than"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference","isActive":true},{"type":"text","text":" because the input does not need to be inout."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"defaultImplementations":3,"title":"parse(_:)","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"topic","url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","role":"symbol","kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"role":"collection","abstract":[],"title":"Parsing","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"}}}