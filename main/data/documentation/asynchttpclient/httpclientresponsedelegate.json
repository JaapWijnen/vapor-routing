{"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/FileDownloadDelegate","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/ResponseAccumulator"],"title":"Conforming Types","type":"conformingTypes"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPClientResponseDelegate"},{"kind":"text","text":" : AnyObject"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"Backpressure","level":3,"text":"Backpressure","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"HTTPClientResponseDelegate"},{"type":"text","text":" can be used to exert backpressure on the server response. This is achieved by way of the futures returned from"},{"type":"text","text":" "},{"type":"codeVoice","code":"didReceiveHead"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didReceiveBodyPart"},{"type":"text","text":". The following functions are part of the “backpressure system” in the delegate:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"didReceiveHead","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"didReceiveBodyPart","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"didFinishRequest","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"didReceiveError","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The first three methods are strictly "},{"inlineContent":[{"type":"text","text":"exclusive"}],"type":"emphasis"},{"type":"text","text":", with that exclusivity managed by the futures returned by "},{"code":"didReceiveHead","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"didReceiveBodyPart","type":"codeVoice"},{"type":"text","text":". What this means is that until the returned future is completed, none of these three methods will be called"},{"type":"text","text":" "},{"type":"text","text":"again. This allows delegates to rate limit the server to a capacity it can manage. "},{"code":"didFinishRequest","type":"codeVoice"},{"type":"text","text":" does not return a future,"},{"type":"text","text":" "},{"type":"text","text":"as we are expecting no more data from the server at this time."}],"type":"paragraph"},{"inlineContent":[{"code":"didReceiveError","type":"codeVoice"},{"type":"text","text":" is somewhat special: it signals the end of this regime. "},{"code":"didRecieveError","type":"codeVoice"},{"type":"text","text":" is not exclusive: it may be called at"},{"type":"text","text":" "},{"type":"text","text":"any time, even if a returned future is not yet completed. "},{"code":"didReceiveError","type":"codeVoice"},{"type":"text","text":" is terminal, meaning that once it has been called none"},{"type":"text","text":" "},{"type":"text","text":"of these four methods will be called again. This can be used as a signal to abandon all outstanding work."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This delegate is strongly held by the "},{"type":"codeVoice","code":"HTTPTaskHandler"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" processing and will be"},{"type":"text","text":" "},{"type":"text","text":"released together with the "},{"type":"codeVoice","code":"HTTPTaskHandler"},{"type":"text","text":" when channel is closed."},{"type":"text","text":" "},{"type":"text","text":"Users of the library are not required to keep a reference to the"},{"type":"text","text":" "},{"type":"text","text":"object that implements this protocol, but may do so if needed."}],"type":"paragraph"}]}]}],"metadata":{"modules":[{"name":"AsyncHTTPClient"}],"roleHeading":"Protocol","title":"HTTPClientResponseDelegate","role":"symbol","externalID":"s:15AsyncHTTPClient0B16ResponseDelegateP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"navigatorTitle":[{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"symbolKind":"protocol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient"]]},"variants":[{"paths":["\/documentation\/asynchttpclient\/httpclientresponsedelegate"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/Response"],"title":"Associated Types"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didFinishRequest(task:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveBodyPart(task:_:)-4fd4v","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveError(task:_:)-fhsg","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequest(task:)-9od5p","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestHead(task:_:)-6khai","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestPart(task:_:)-4qxap"],"title":"Instance Methods"}],"kind":"symbol","abstract":[{"type":"codeVoice","code":"HTTPClientResponseDelegate"},{"text":" allows an implementation to receive notifications about request processing and to control how response parts are processed.","type":"text"},{"text":" ","type":"text"},{"text":"You can implement this protocol if you need fine-grained control over an HTTP request\/response, for example, if you want to inspect the response","type":"text"},{"text":" ","type":"text"},{"text":"headers before deciding whether to accept a response body, or if you want to stream your request body. Pass an instance of your conforming","type":"text"},{"text":" ","type":"text"},{"text":"class to the ","type":"text"},{"type":"codeVoice","code":"HTTPClient.execute()"},{"text":" method and this package will call each delegate method appropriately as the request takes place.\/","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate"},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequestPart(task:_:)-4qxap":{"kind":"symbol","abstract":[{"type":"text","text":"Called when a part of the request body is sent. Could be called zero or more times."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestPart(task:_:)-4qxap","title":"didSendRequestPart(task:_:)","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didSendRequestPart","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"IOData","preciseIdentifier":"s:7NIOCore6IODataO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequestpart(task:_:)-4qxap","defaultImplementations":1,"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/Response":{"abstract":[],"required":true,"type":"topic","title":"Response","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/Response","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/response"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequest(task:)-9od5p":{"abstract":[{"type":"text","text":"Called when the request is fully sent. Will be called once."}],"required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didSendRequest","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">)"}],"defaultImplementations":1,"type":"topic","kind":"symbol","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequest(task:)-9od5p","title":"didSendRequest(task:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequest(task:)-9od5p","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequestHead(task:_:)-6khai":{"title":"didSendRequestHead(task:_:)","type":"topic","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequesthead(task:_:)-6khai","defaultImplementations":1,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didSendRequestHead"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C","text":"HTTPClient","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","text":"Task","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:8NIOHTTP115HTTPRequestHeadV","text":"HTTPRequestHead","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Called when the request head is sent. Will be called once."}],"role":"symbol","kind":"symbol","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestHead(task:_:)-6khai"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/ResponseAccumulator":{"role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseAccumulator"}],"url":"\/documentation\/asynchttpclient\/responseaccumulator","type":"topic","title":"ResponseAccumulator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseAccumulator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/ResponseAccumulator"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientCopyingDelegate":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate","type":"topic","abstract":[],"title":"HTTPClientCopyingDelegate","url":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPClientCopyingDelegate"}],"navigatorTitle":[{"kind":"identifier","text":"HTTPClientCopyingDelegate"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/FileDownloadDelegate":{"role":"symbol","abstract":[{"type":"text","text":"Handles a streaming download to a given file path, allowing headers and progress to be reported."}],"title":"FileDownloadDelegate","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"FileDownloadDelegate","kind":"identifier"}],"url":"\/documentation\/asynchttpclient\/filedownloaddelegate","kind":"symbol","navigatorTitle":[{"text":"FileDownloadDelegate","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/FileDownloadDelegate","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate":{"type":"topic","role":"symbol","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate","navigatorTitle":[{"kind":"identifier","text":"HTTPClientResponseDelegate"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate","title":"HTTPClientResponseDelegate","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPClientResponseDelegate"}],"abstract":[{"type":"codeVoice","code":"HTTPClientResponseDelegate"},{"text":" allows an implementation to receive notifications about request processing and to control how response parts are processed.","type":"text"},{"text":" ","type":"text"},{"text":"You can implement this protocol if you need fine-grained control over an HTTP request\/response, for example, if you want to inspect the response","type":"text"},{"text":" ","type":"text"},{"text":"headers before deciding whether to accept a response body, or if you want to stream your request body. Pass an instance of your conforming","type":"text"},{"text":" ","type":"text"},{"text":"class to the ","type":"text"},{"type":"codeVoice","code":"HTTPClient.execute()"},{"text":" method and this package will call each delegate method appropriately as the request takes place.\/","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveError(task:_:)-fhsg":{"title":"didReceiveError(task:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","defaultImplementations":1,"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceiveerror(task:_:)-fhsg","abstract":[{"type":"text","text":"Called when error was thrown during request execution. Will be called zero or one time only. Request processing will be stopped after that."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveError(task:_:)-fhsg","required":true},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient":{"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","title":"AsyncHTTPClient","url":"\/documentation\/asynchttpclient","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveBodyPart(task:_:)-4fd4v":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveBodyPart","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Called when part of a response body is received. Could be called zero or more times."},{"type":"text","text":" "},{"type":"text","text":"You must return an "},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"type":"text","text":" that you complete when you have finished processing the body part."},{"type":"text","text":" "},{"type":"text","text":"You can create an already succeeded future by calling "},{"type":"codeVoice","code":"task.eventLoop.makeSucceededFuture(())"},{"type":"text","text":"."}],"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivebodypart(task:_:)-4fd4v","kind":"symbol","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveBodyPart(task:_:)-4fd4v","type":"topic","defaultImplementations":1,"title":"didReceiveBodyPart(task:_:)"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveHead(task:_:)-9r4xd":{"defaultImplementations":1,"title":"didReceiveHead(task:_:)","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivehead(task:_:)-9r4xd","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Called when response head is received. Will be called once."},{"type":"text","text":" "},{"type":"text","text":"You must return an "},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"type":"text","text":" that you complete when you have finished processing the body part."},{"type":"text","text":" "},{"type":"text","text":"You can create an already succeeded future by calling "},{"type":"codeVoice","code":"task.eventLoop.makeSucceededFuture(())"},{"type":"text","text":"."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didReceiveHead"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"HTTPResponseHead","preciseIdentifier":"s:8NIOHTTP116HTTPResponseHeadV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didFinishRequest(task:)":{"type":"topic","abstract":[{"type":"text","text":"Called when the complete HTTP request is finished. You must return an instance of your "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" associated type. Will be called once, except if an error occurred."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didFinishRequest"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"text":".","kind":"text"},{"text":"Task","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"}],"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didfinishrequest(task:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didFinishRequest(task:)","title":"didFinishRequest(task:)","required":true}}}