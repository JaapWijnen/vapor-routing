{"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/wrapInboundOut(_:)","interfaceLanguage":"swift"},"metadata":{"externalID":"s:7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF::SYNTHESIZED::s:18NIOHTTPCompression22HTTPResponseCompressorC","role":"symbol","extendedModule":"NIOCore","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrapInboundOut","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"}],"title":"wrapInboundOut(_:)","symbolKind":"method","modules":[{"name":"NIOHTTPCompression"}],"roleHeading":"Instance Method"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","kind":"typeIdentifier","text":"NIOAny"}],"platforms":["Linux"],"languages":["swift"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niohttpcompression\/httpresponsecompressor\/wrapinboundout(_:)"]}],"abstract":[{"text":"Wrap the provided ","type":"text"},{"type":"codeVoice","code":"InboundOut"},{"text":" that will be passed to the next ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" by calling ","type":"text"},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"text":".","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/ChannelInboundHandler-Implementations"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor/ChannelInboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/ChannelInboundHandler-Implementations","abstract":[],"type":"topic","title":"ChannelInboundHandler Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/niohttpcompression\/httpresponsecompressor\/channelinboundhandler-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseCompressor","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"A HTTPResponseCompressor is a duplex channel handler that handles automatic streaming compression of","type":"text"},{"text":" ","type":"text"},{"text":"HTTP responses. It respects the client’s Accept-Encoding preferences, including q-values if present,","type":"text"},{"text":" ","type":"text"},{"text":"and ensures that clients are served the compression algorithm that works best for them.","type":"text"}],"title":"HTTPResponseCompressor","navigatorTitle":[{"text":"HTTPResponseCompressor","kind":"identifier"}],"url":"\/documentation\/niohttpcompression\/httpresponsecompressor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"title":"NIOAny","type":"topic","url":"\/documentation\/niocore\/nioany","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor/wrapInboundOut(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/wrapInboundOut(_:)","abstract":[{"text":"Wrap the provided ","type":"text"},{"type":"codeVoice","code":"InboundOut"},{"text":" that will be passed to the next ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" by calling ","type":"text"},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"text":".","type":"text"}],"type":"topic","title":"wrapInboundOut(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/niohttpcompression\/httpresponsecompressor\/wrapinboundout(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression":{"abstract":[],"role":"collection","title":"NIOHTTPCompression","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression","url":"\/documentation\/niohttpcompression","type":"topic","kind":"symbol"}}}