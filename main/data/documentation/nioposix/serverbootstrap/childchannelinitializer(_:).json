{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap\/childChannelInitializer(_:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","externalID":"s:8NIOPosix15ServerBootstrapC23childChannelInitializeryACXD7NIOCore15EventLoopFutureCyytGAE0E0_pcF","modules":[{"name":"NIOPosix"}],"symbolKind":"method","title":"childChannelInitializer(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"childChannelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"roleHeading":"Instance Method"},"abstract":[{"type":"text","text":"Initialize the accepted "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":"s with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Note that if the "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" fails then the error will be"},{"type":"text","text":" "},{"type":"text","text":"fired in the "},{"inlineContent":[{"text":"parent","type":"text"}],"type":"emphasis"},{"type":"text","text":" channel."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"variants":[{"paths":["\/documentation\/nioposix\/serverbootstrap\/childchannelinitializer(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"childChannelInitializer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that initializes the provided ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"initializer"}],"kind":"parameters"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":" will be invoked once for every accepted connection. Therefore itâ€™s usually the"},{"type":"text","text":" "},{"type":"text","text":"right choice to instantiate stateful "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s within the closure to make sure they are not"},{"type":"text","text":" "},{"type":"text","text":"accidentally shared across "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s. There are expert use-cases where stateful handler need to be"},{"type":"text","text":" "},{"type":"text","text":"shared across "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s in which case the user is responsible to synchronise the state access"},{"type":"text","text":" "},{"type":"text","text":"appropriately."}]}],"type":"aside"},{"inlineContent":[{"text":"The accepted ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" will operate on ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" as inbound and ","type":"text"},{"code":"IOData","type":"codeVoice"},{"text":" as outbound messages.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ServerBootstrap":{"url":"\/documentation\/nioposix\/serverbootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ServerBootstrap"},{"text":" is an easy way to bootstrap a ","type":"text"},{"type":"codeVoice","code":"ServerSocketChannel"},{"text":" when creating network servers.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ServerBootstrap","kind":"identifier"}],"type":"topic","title":"ServerBootstrap","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServerBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","abstract":[{"type":"text","text":"A "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","type":"topic","role":"symbol","url":"\/documentation\/niocore\/channel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"role":"collection","title":"NIOPosix","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ServerBootstrap/childChannelInitializer(_:)":{"url":"\/documentation\/nioposix\/serverbootstrap\/childchannelinitializer(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap\/childChannelInitializer(_:)","abstract":[{"type":"text","text":"Initialize the accepted "},{"type":"codeVoice","code":"SocketChannel"},{"text":"s with ","type":"text"},{"type":"codeVoice","code":"initializer"},{"text":". The most common task in initializer is to add","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s to the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":". Note that if the ","type":"text"},{"type":"codeVoice","code":"initializer"},{"text":" fails then the error will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fired in the "},{"type":"emphasis","inlineContent":[{"text":"parent","type":"text"}]},{"type":"text","text":" channel."}],"role":"symbol","type":"topic","title":"childChannelInitializer(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"childChannelInitializer"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":") -> "},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol"}}}