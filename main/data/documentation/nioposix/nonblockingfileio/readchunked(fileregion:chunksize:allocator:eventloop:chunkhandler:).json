{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)"]}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"NIOPosix"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10FileRegionV","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"role":"symbol","symbolKind":"method","title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileRegion9chunkSize9allocator9eventLoop0J7Handler7NIOCore05EventN6FutureCyytGAJ0dI0V_SiAJ19ByteBufferAllocatorVAJ0qN0_pAmJ0sT0VctF"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileRegion","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","preciseIdentifier":"s:7NIOCore10FileRegionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = NonBlockingFileIO.defaultChunkSize, "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBufferAllocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ByteBuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which is the result of the overall operation. If either the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" or "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" fails, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail too. If the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" as well as "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" always succeeded, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will succeed too."}]}]},{"parameters":[{"name":"fileRegion","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The file region to read."}]}]},{"name":"chunkSize","content":[{"inlineContent":[{"type":"text","text":"The size of the individual chunks to deliver."}],"type":"paragraph"}]},{"name":"allocator","content":[{"inlineContent":[{"type":"text","text":"A "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" used to allocate space for the chunks."}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" to call ","type":"text"},{"type":"codeVoice","code":"chunkHandler"},{"text":" on.","type":"text"}],"type":"paragraph"}]},{"name":"chunkHandler","content":[{"type":"paragraph","inlineContent":[{"text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". If the returned ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" fails, the overall operation is aborted.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" will be called on "},{"code":"eventLoop","type":"codeVoice"},{"type":"text","text":" for every chunk that was read. Assuming "},{"code":"fileRegion.readableBytes","type":"codeVoice"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"type":"text","text":"zero and there are enough bytes available "},{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" will be called "},{"code":"1 + |_ fileRegion.readableBytes \/ chunkSize _|","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"times, delivering "},{"code":"chunkSize","type":"codeVoice"},{"type":"text","text":" bytes each time. If less than "},{"code":"fileRegion.readableBytes","type":"codeVoice"},{"type":"text","text":" bytes can be read from the file,"},{"type":"text","text":" "},{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" will be called less often with the last invocation possibly being of less than "},{"code":"chunkSize","type":"codeVoice"},{"type":"text","text":" bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allocation and reading of a subsequent chunk will only be attempted when "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" succeeds."}]},{"type":"paragraph","inlineContent":[{"text":"This method will not use the file descriptor’s seek pointer which means there is no danger of reading from the","type":"text"},{"text":" ","type":"text"},{"text":"same ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" in multiple threads.","type":"text"}]}]}],"abstract":[{"text":"Read a ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" in chunks of ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes on ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"’s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"title":"ByteBufferAllocator","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","role":"symbol","navigatorTitle":[{"text":"ByteBufferAllocator","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferAllocator","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"title":"NonBlockingFileIO","url":"\/documentation\/nioposix\/nonblockingfileio","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","role":"symbol","navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)":{"type":"topic","role":"symbol","url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","abstract":[{"text":"Read a ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" in chunks of ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes on ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"’s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10FileRegionV","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"title":"ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"role":"symbol","title":"FileRegion","url":"\/documentation\/niocore\/fileregion"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"role":"collection","title":"NIOPosix","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"title":"EventLoop","url":"\/documentation\/niocore\/eventloop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"kind":"symbol"}}}