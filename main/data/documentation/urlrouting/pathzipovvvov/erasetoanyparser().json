{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV\/eraseToAnyParser()"},"metadata":{"extendedModule":"Parsing","symbolKind":"method","role":"symbol","externalID":"s:7Parsing6ParserPAAE010eraseToAnyB0AA0eB0Vy5InputQz6OutputQzGyF::SYNTHESIZED::s:10URLRouting13PathZipOVVVOVV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"eraseToAnyParser","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AnyParser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"modules":[{"name":"URLRouting"}],"roleHeading":"Instance Method","title":"eraseToAnyParser()"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eraseToAnyParser","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyParser","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AnyParser"},{"text":" wrapping this parser.","type":"text"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This form of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type erasure"}]},{"text":" preserves abstraction across API boundaries, such as different","type":"text"},{"text":" ","type":"text"},{"text":"modules.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you expose your composed parsers as the "},{"type":"codeVoice","code":"AnyParser"},{"type":"text","text":" type, you can change the underlying"},{"type":"text","text":" "},{"type":"text","text":"implementation over time without affecting existing clients."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Equivalent to passing "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AnyParser.init"},{"type":"text","text":"."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/urlrouting\/pathzipovvvov\/erasetoanyparser()"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV\/Parser-Implementations"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/URLRouting":{"kind":"symbol","role":"collection","url":"\/documentation\/urlrouting","title":"URLRouting","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOVVVOV/Parser-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV\/Parser-Implementations","title":"Parser Implementations","url":"\/documentation\/urlrouting\/pathzipovvvov\/parser-implementations","role":"collectionGroup","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOVVVOV/eraseToAnyParser()":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV\/eraseToAnyParser()","title":"eraseToAnyParser()","abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"url":"\/documentation\/urlrouting\/pathzipovvvov\/erasetoanyparser()","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOVVVOV":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOVVVOV","title":"PathZipOVVVOV","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"PathZipOVVVOV","kind":"identifier"}],"abstract":[],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathZipOVVVOV","kind":"identifier"}],"url":"\/documentation\/urlrouting\/pathzipovvvov"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyParser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyParser","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"role":"symbol","title":"AnyParser","type":"topic","url":"\/documentation\/parsing\/anyparser","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}]}}}