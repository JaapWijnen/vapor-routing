{"variants":[{"paths":["\/documentation\/urlrouting\/pathzipoooooo\/erasetoanyparser()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Wraps this parser with a type eraser.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO\/eraseToAnyParser()","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO\/Parser-Implementations"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyParser","kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"AnyParser","type":"codeVoice"},{"text":" wrapping this parser.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"This form of "},{"inlineContent":[{"text":"type erasure","type":"text"}],"type":"emphasis"},{"type":"text","text":" preserves abstraction across API boundaries, such as different"},{"type":"text","text":" "},{"type":"text","text":"modules."}],"type":"paragraph"},{"inlineContent":[{"text":"When you expose your composed parsers as the ","type":"text"},{"code":"AnyParser","type":"codeVoice"},{"text":" type, you can change the underlying","type":"text"},{"text":" ","type":"text"},{"text":"implementation over time without affecting existing clients.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Equivalent to passing "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AnyParser.init"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eraseToAnyParser","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:7Parsing6ParserPAAE010eraseToAnyB0AA0eB0Vy5InputQz6OutputQzGyF::SYNTHESIZED::s:10URLRouting13PathZipOOOOOOV","modules":[{"name":"URLRouting"}],"extendedModule":"Parsing","roleHeading":"Instance Method","role":"symbol","title":"eraseToAnyParser()"},"references":{"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOOOOOO/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO\/Parser-Implementations","title":"Parser Implementations","type":"topic","url":"\/documentation\/urlrouting\/pathzipoooooo\/parser-implementations","kind":"article","role":"collectionGroup","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOOOOOO":{"abstract":[],"role":"symbol","type":"topic","title":"PathZipOOOOOO","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathZipOOOOOO","kind":"identifier"}],"navigatorTitle":[{"text":"PathZipOOOOOO","kind":"identifier"}],"url":"\/documentation\/urlrouting\/pathzipoooooo"},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipOOOOOO/eraseToAnyParser()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV","text":"AnyParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/urlrouting\/pathzipoooooo\/erasetoanyparser()","title":"eraseToAnyParser()","abstract":[{"text":"Wraps this parser with a type eraser.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipOOOOOO\/eraseToAnyParser()"},"doc://co.pointfree.VaporRouting/documentation/URLRouting":{"kind":"symbol","role":"collection","url":"\/documentation\/urlrouting","title":"URLRouting","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyParser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyParser","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"role":"symbol","title":"AnyParser","type":"topic","url":"\/documentation\/parsing\/anyparser","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}]}}}