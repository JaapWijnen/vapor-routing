{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/nioany"]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The most important use-cases for ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" are values travelling through the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" whose type can’t","type":"text"},{"text":" ","type":"text"},{"text":"be calculated at compile time. For example:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the ","type":"text"},{"type":"codeVoice","code":"channelRead"},{"text":" of any ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"write"},{"type":"text","text":" method of a "},{"type":"codeVoice","code":"ChannelOutboundHandler"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The abstraction that delivers a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to user code must provide a mechanism to unwrap a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a"},{"type":"text","text":" "},{"type":"text","text":"certain type known at run-time. Canonical example:"}]},{"code":["class SandwichHandler: ChannelInboundHandler {","    typealias InboundIn = Bacon \/* we expected to be delivered `Bacon` ... *\/","    typealias InboundOut = Sandwich \/* ... and we will make and deliver a `Sandwich` from that *\/","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","         \/* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel","            pipeline can't be computed. The pipeline can't be computed at compile time as it can change","            dynamically at run-time. Yet, we assert that in any configuration the channel handler before","            `SandwichHandler` does actually send us a stream of `Bacon`.","         *\/","         let bacon = self.unwrapInboundIn(data) \/* `Bacon` or crash *\/","         let sandwich = makeSandwich(bacon)","         context.fireChannelRead(self.wrapInboundOut(sandwich)) \/* as promised we deliver a wrapped `Sandwich` *\/","    }","}"],"type":"codeListing","syntax":null}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)"],"title":"Initializers"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations"],"title":"Default Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"metadata":{"symbolKind":"struct","externalID":"s:7NIOCore6NIOAnyV","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","modules":[{"name":"NIOCore"}],"navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"role":"symbol"},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/s23CustomStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/CustomStringConvertible-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations","kind":"article","title":"CustomStringConvertible Implementations","url":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/init(_:)":{"abstract":[{"type":"text","text":"Wrap a value in a "},{"code":"NIOAny","type":"codeVoice"},{"text":". In most cases you should not create a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" directly using this constructor.","type":"text"},{"text":" ","type":"text"},{"text":"The abstraction that accepts values of type ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" must also provide a mechanism to do the wrapping. An","type":"text"},{"text":" ","type":"text"},{"text":"example is a ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" which provides "},{"type":"codeVoice","code":"self.wrapInboundOut(aValueOfTypeInboundOut)"},{"type":"text","text":"."}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"init(_:)","url":"\/documentation\/niocore\/nioany\/init(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"title":"NIOAny","type":"topic","url":"\/documentation\/niocore\/nioany","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol"}}}