{"abstract":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" when necessary.","type":"text"},{"text":" ","type":"text"},{"text":"The library which accepts this provider takes ownership of the created event loop group,","type":"text"},{"text":" ","type":"text"},{"text":"and must ensure its proper shutdown when the library is being shut down.","type":"text"}],"variants":[{"paths":["\/documentation\/niocore\/nioeventloopgroupprovider\/createnew"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"createNew"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"}],"metadata":{"externalID":"s:7NIOCore25NIOEventLoopGroupProviderO9createNewyA2CmF","symbolKind":"case","roleHeading":"Case","modules":[{"name":"NIOCore"}],"title":"NIOEventLoopGroupProvider.createNew","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"createNew"}],"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider\/createNew"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider"]]},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"navigatorTitle":[{"kind":"identifier","text":"NIOEventLoopGroupProvider"}],"type":"topic","title":"NIOEventLoopGroupProvider","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOEventLoopGroupProvider"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","abstract":[{"text":"This type is intended to be used by libraries which use NIO, and offer their users either the option","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"code":".share","type":"codeVoice"},{"text":" an existing event loop group or create (and manage) a new one (","type":"text"},{"code":".createNew","type":"codeVoice"},{"text":") and let it be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"managed by given library and its lifecycle."}],"role":"symbol","url":"\/documentation\/niocore\/nioeventloopgroupprovider","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider/createNew":{"title":"NIOEventLoopGroupProvider.createNew","url":"\/documentation\/niocore\/nioeventloopgroupprovider\/createnew","abstract":[{"type":"text","text":"Create a new "},{"code":"EventLoopGroup","type":"codeVoice"},{"text":" when necessary.","type":"text"},{"text":" ","type":"text"},{"text":"The library which accepts this provider takes ownership of the created event loop group,","type":"text"},{"text":" ","type":"text"},{"text":"and must ensure its proper shutdown when the library is being shut down.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider\/createNew","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"createNew","kind":"identifier"}],"type":"topic","kind":"symbol"}}}