{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"text":". This will reset the state of this ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to the state","type":"text"},{"text":" ","type":"text"},{"text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for a new use-case.","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The minimum capacity that will be (re)allocated for this buffer","type":"text"}],"type":"paragraph"}],"name":"minimumCapacity"}]},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This method will allocate if the underlying storage is referenced by another ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":". Even if an","type":"text"},{"text":" ","type":"text"},{"text":"allocation is necessary this will be cheaper as the copy of the storage is elided.","type":"text"}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn"},"metadata":{"externalID":"s:7NIOCore10ByteBufferV5clear15minimumCapacityys6UInt32V_tF","symbolKind":"method","platforms":[],"title":"clear(minimumCapacity:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method"},"deprecationSummary":[{"inlineContent":[{"text":"Use an `Int` as the argument","type":"text"}],"type":"paragraph"}],"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-7qskn"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"title":"ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/clear(minimumCapacity:)-7qskn":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". This will reset the state of this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn","title":"clear(minimumCapacity:)","role":"symbol","url":"\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-7qskn","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"}}}