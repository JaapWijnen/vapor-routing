{"sections":[],"metadata":{"roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:7NIOCore10ByteBufferV6bufferA2C_tcfc","title":"init(buffer:)","extendedModule":"NIOCore","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":")","kind":"text"}],"modules":[{"name":"NIOCore"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"abstract":[{"type":"text","text":"Create a fresh "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" containing the readable bytes of "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)"},"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/init(buffer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This may allocate a new "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" with enough space to fit "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" and potentially some extra space using"},{"type":"text","text":" "},{"type":"text","text":"the default allocator."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"info: If you have access to a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":", "},{"code":"ChannelHandlerContext","type":"codeVoice"},{"type":"text","text":", or "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" we"},{"type":"text","text":" "},{"type":"text","text":"recommend using "},{"code":"channel.allocator.buffer(buffer:)","type":"codeVoice"},{"type":"text","text":". Or if you want to write multiple items into the"},{"type":"text","text":" "},{"type":"text","text":"buffer use "},{"code":"channel.allocator.buffer(capacity: ...)","type":"codeVoice"},{"type":"text","text":" to allocate a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" of the right"},{"type":"text","text":" "},{"type":"text","text":"size followed by a "},{"code":"writeImmutableBuffer","type":"codeVoice"},{"type":"text","text":" instead of using this method. This allows SwiftNIO to do"},{"type":"text","text":" "},{"type":"text","text":"accounting and optimisations of resources acquired for operations on a given "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" in the future."}]}]}],"type":"unorderedList"},{"content":[{"inlineContent":[{"type":"text","text":"Use this method only if you deliberately want to reallocate a potentially smaller "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" than the"},{"type":"text","text":" "},{"type":"text","text":"one you already have. Given that "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" is a value type, defensive copies are not necessary. If"},{"type":"text","text":" "},{"type":"text","text":"you have a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" but would like the "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" to start at "},{"code":"0","type":"codeVoice"},{"type":"text","text":", consider "},{"code":"readSlice","type":"codeVoice"},{"type":"text","text":" instead."}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init(buffer:)":{"url":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Create a fresh ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" containing the readable bytes of ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","title":"init(buffer:)","role":"symbol","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or","type":"text"},{"text":" ","type":"text"},{"text":"more bytes (octets).","type":"text"}],"title":"ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","navigatorTitle":[{"text":"ByteBuffer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBuffer","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"}}}