{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"sections":[],"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler"],"title":"Inherits From","kind":"relationships"},{"type":"conformingTypes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerUpgradeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientResponseAggregator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPServerRequestAggregator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler"],"title":"Conforming Types","kind":"relationships"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","interfaceLanguage":"swift"},"metadata":{"role":"symbol","navigatorTitle":[{"text":"RemovableChannelHandler","kind":"identifier"}],"externalID":"s:7NIOCore23RemovableChannelHandlerP","symbolKind":"protocol","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RemovableChannelHandler","kind":"identifier"}],"title":"RemovableChannelHandler","modules":[{"name":"NIOCore"}]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RemovableChannelHandler","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"ChannelHandler","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14ChannelHandlerP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"When a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" gets torn down, every ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" will be","type":"text"},{"text":" ","type":"text"},{"text":"removed from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":". Those removals however happen synchronously and are not going through","type":"text"},{"text":" ","type":"text"},{"text":"the methods of this protocol.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/removablechannelhandler"]}],"abstract":[{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can be dynamically removed from a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whilst","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is operating normally.","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is required to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" (using","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":") as soon as possible.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler\/removeHandler(context:removalToken:)-2jaoc"],"title":"Instance Methods"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPResponseDecompressor":{"title":"NIOHTTPResponseDecompressor","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPResponseDecompressor"}],"role":"symbol","url":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPResponseDecompressor"}],"type":"topic","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPServerRequestAggregator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPServerRequestAggregator","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPServerRequestAggregator"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPServerRequestAggregator"}],"url":"\/documentation\/niohttp1\/niohttpserverrequestaggregator","title":"NIOHTTPServerRequestAggregator","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" that handles HTTP chunked ","type":"text"},{"code":"HTTPServerRequestPart","type":"codeVoice"},{"text":" ","type":"text"},{"text":"messages by aggregating individual message chunks into a single","type":"text"},{"text":" ","type":"text"},{"code":"NIOHTTPServerRequestFull","type":"codeVoice"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdleStateHandler"}],"type":"topic","kind":"symbol","abstract":[{"text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.","type":"text"}],"role":"symbol","title":"IdleStateHandler","url":"\/documentation\/niocore\/idlestatehandler","navigatorTitle":[{"kind":"identifier","text":"IdleStateHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerPipelineHandler":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"title":"HTTPServerPipelineHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that handles HTTP pipelining by buffering inbound data until a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"response has been sent."}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"url":"\/documentation\/niohttp1\/httpserverpipelinehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler":{"title":"NIOSSLHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSSLHandler"}],"role":"symbol","url":"\/documentation\/niossl\/niosslhandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLHandler"}],"type":"topic","abstract":[{"type":"text","text":"The base class for all NIOSSL handlers. This class cannot actually be instantiated by"},{"type":"text","text":" "},{"type":"text","text":"users directly: instead, users must select which mode they would like their handler to"},{"type":"text","text":" "},{"type":"text","text":"operate in, client or server."}]},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLServerHandler":{"abstract":[{"text":"A channel handler that wraps a channel in TLS using NIOSSL. This","type":"text"},{"text":" ","type":"text"},{"text":"handler can be used in channels that are acting as the server in","type":"text"},{"text":" ","type":"text"},{"text":"the TLS dialog. For client connections, use the ","type":"text"},{"type":"codeVoice","code":"NIOSSLClientHandler"},{"text":".","type":"text"}],"url":"\/documentation\/niossl\/niosslserverhandler","kind":"symbol","title":"NIOSSLServerHandler","navigatorTitle":[{"kind":"identifier","text":"NIOSSLServerHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLServerHandler"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"kind":"symbol","navigatorTitle":[{"text":"AcceptBackoffHandler","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AcceptBackoffHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/acceptbackoffhandler","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that implements a backoff for a ","type":"text"},{"code":"ServerChannel","type":"codeVoice"},{"text":" when accept produces an ","type":"text"},{"code":"IOError","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These errors are often recoverable by reducing the rate at which we call accept.","type":"text"}],"title":"AcceptBackoffHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientResponseAggregator":{"url":"\/documentation\/niohttp1\/niohttpclientresponseaggregator","role":"symbol","title":"NIOHTTPClientResponseAggregator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientResponseAggregator","abstract":[{"text":"A ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that handles HTTP chunked ","type":"text"},{"code":"HTTPClientResponsePart","type":"codeVoice"},{"text":" ","type":"text"},{"text":"messages by aggregating individual message chunks into a single","type":"text"},{"text":" ","type":"text"},{"code":"NIOHTTPClientResponseFull","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientResponseAggregator"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientResponseAggregator"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerUpgradeHandler":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerUpgradeHandler"}],"url":"\/documentation\/niohttp1\/httpserverupgradehandler","navigatorTitle":[{"kind":"identifier","text":"HTTPServerUpgradeHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerUpgradeHandler","title":"HTTPServerUpgradeHandler","abstract":[{"text":"A server-side channel handler that receives HTTP requests and optionally performs a HTTP-upgrade.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removes itself from the channel pipeline after the first inbound request on the connection, regardless of"},{"type":"text","text":" "},{"text":"whether the upgrade succeeded or not.","type":"text"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler/removeHandler(context:removalToken:)-2jaoc":{"title":"removeHandler(context:removalToken:)","role":"symbol","type":"topic","kind":"symbol","defaultImplementations":1,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler\/removeHandler(context:removalToken:)-2jaoc","abstract":[{"text":"Ask the receiving ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" as soon as possible.","type":"text"},{"text":" ","type":"text"},{"text":"The receiving ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" may elect to remove itself sometime after this method call, rather than","type":"text"},{"text":" ","type":"text"},{"text":"immediately, but if it does so it must take the necessary precautions to handle events arriving between the","type":"text"},{"text":" ","type":"text"},{"text":"invocation of this method and the call to ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":" that triggers the actual","type":"text"},{"text":" ","type":"text"},{"text":"removal.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"removeHandler","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"removalToken","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RemovalToken","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC12RemovalTokenV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"required":true,"url":"\/documentation\/niocore\/removablechannelhandler\/removehandler(context:removaltoken:)-2jaoc"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestCompressor":{"navigatorTitle":[{"text":"NIOHTTPRequestCompressor","kind":"identifier"}],"abstract":[{"type":"text","text":"NIOHTTPResponseCompressor is an outbound channel handler that handles automatic streaming compression of"},{"type":"text","text":" "},{"type":"text","text":"HTTP requests."}],"role":"symbol","title":"NIOHTTPRequestCompressor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","url":"\/documentation\/niohttpcompression\/niohttprequestcompressor","type":"topic","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPRequestCompressor","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseCompressor","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"A HTTPResponseCompressor is a duplex channel handler that handles automatic streaming compression of","type":"text"},{"text":" ","type":"text"},{"text":"HTTP responses. It respects the clientâ€™s Accept-Encoding preferences, including q-values if present,","type":"text"},{"text":" ","type":"text"},{"text":"and ensures that clients are served the compression algorithm that works best for them.","type":"text"}],"title":"HTTPResponseCompressor","navigatorTitle":[{"text":"HTTPResponseCompressor","kind":"identifier"}],"url":"\/documentation\/niohttpcompression\/httpresponsecompressor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"url":"\/documentation\/niocore\/channelhandler","role":"symbol","title":"ChannelHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestDecompressor":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","navigatorTitle":[{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}],"title":"NIOHTTPRequestDecompressor","abstract":[],"url":"\/documentation\/niohttpcompression\/niohttprequestdecompressor","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPRequestEncoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","navigatorTitle":[{"kind":"identifier","text":"HTTPRequestEncoder"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPRequestEncoder"}],"url":"\/documentation\/niohttp1\/httprequestencoder","title":"HTTPRequestEncoder","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" that can serialize HTTP requests.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler":{"title":"ApplicationProtocolNegotiationHandler","type":"topic","abstract":[{"type":"text","text":"A helper "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that makes it easy to swap channel pipelines"},{"type":"text","text":" "},{"type":"text","text":"based on the result of an ALPN negotiation."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ApplicationProtocolNegotiationHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ApplicationProtocolNegotiationHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","kind":"symbol","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/NIOWritePCAPHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","kind":"symbol","navigatorTitle":[{"text":"NIOWritePCAPHandler","kind":"identifier"}],"title":"NIOWritePCAPHandler","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can write a ","type":"text"},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","type":"reference"},{"text":" containing the send\/received","type":"text"},{"text":" ","type":"text"},{"text":"data as synthesized TCP packet captures.","type":"text"}],"url":"\/documentation\/nioextras\/niowritepcaphandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOWritePCAPHandler","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"type":"topic","url":"\/documentation\/niocore\/backpressurehandler","kind":"symbol","role":"symbol","title":"BackPressureHandler"},"https://en.wikipedia.org/wiki/Pcap":{"title":".pcap file","type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","url":"https:\/\/en.wikipedia.org\/wiki\/Pcap","titleInlineContent":[{"code":".pcap","type":"codeVoice"},{"text":" file","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandlerContext.removeHandler"},{"type":"text","text":") as soon as possible."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"url":"\/documentation\/niocore\/removablechannelhandler","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"title":"RemovableChannelHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLClientHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLClientHandler","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSSLClientHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"A channel handler that wraps a channel in TLS using NIOSSL."},{"type":"text","text":" "},{"type":"text","text":"This handler can be used in channels that are acting as the client"},{"type":"text","text":" "},{"type":"text","text":"in the TLS dialog. For server connections, use the "},{"type":"codeVoice","code":"NIOSSLServerHandler"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/niossl\/niosslclienthandler","kind":"symbol","role":"symbol","title":"NIOSSLClientHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SOCKSClientHandler"}],"navigatorTitle":[{"kind":"identifier","text":"SOCKSClientHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","title":"SOCKSClientHandler","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niosocks\/socksclienthandler","abstract":[{"type":"text","text":"Connects to a SOCKS server to establish a proxied connection"},{"type":"text","text":" "},{"type":"text","text":"to a host. This handler should be inserted at the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified"},{"type":"text","text":" "},{"type":"text","text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets."}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"role":"symbol","title":"NIOHTTPClientUpgradeHandler","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"text":" ","type":"text"},{"text":"the a protocol. It may add headers for a set of protocols in preference order.","type":"text"},{"text":" ","type":"text"},{"text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply","type":"text"},{"text":" ","type":"text"},{"text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}],"navigatorTitle":[{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}],"url":"\/documentation\/niohttp1\/niohttpclientupgradehandler","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPResponseEncoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder","navigatorTitle":[{"text":"HTTPResponseEncoder","kind":"identifier"}],"title":"HTTPResponseEncoder","type":"topic","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"text":" that can serialize HTTP responses.","type":"text"}],"url":"\/documentation\/niohttp1\/httpresponseencoder","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseEncoder","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSServerHandshakeHandler":{"navigatorTitle":[{"kind":"identifier","text":"SOCKSServerHandshakeHandler"}],"type":"topic","title":"SOCKSServerHandshakeHandler","abstract":[{"type":"text","text":"Add this handshake handler to the front of your channel, closest to the network."},{"type":"text","text":" "},{"type":"text","text":"The handler will receive bytes from the network and run them through a state machine"},{"type":"text","text":" "},{"type":"text","text":"and parser to enforce SOCKSv5 protocol correctness. Inbound bytes will by parsed into"},{"type":"text","text":" "},{"type":"codeVoice","code":"ClientMessage"},{"type":"text","text":" for downstream consumption. Send "},{"code":"ServerMessage","type":"codeVoice"},{"type":"text","text":" to this"},{"type":"text","text":" "},{"type":"text","text":"handler."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SOCKSServerHandshakeHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler","url":"\/documentation\/niosocks\/socksserverhandshakehandler","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"title":"ByteToMessageHandler","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ByteToMessageHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/bytetomessagehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerProtocolErrorHandler":{"abstract":[{"type":"text","text":"A simple channel handler that catches errors emitted by parsing HTTP requests"},{"type":"text","text":" "},{"type":"text","text":"and sends 400 Bad Request responses."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","navigatorTitle":[{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"title":"HTTPServerProtocolErrorHandler","type":"topic","url":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"kind":"symbol"}}}