{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","roleHeading":"Instance Method","title":"nonemptyFlatMapThrowing(_:)","externalID":"s:7NIOCore15EventLoopFutureC8AsyncKitE23nonemptyFlatMapThrowingyACyqd__Gqd__xKcSlRzSmRd__lF","modules":[{"name":"NIOCore"}],"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonemptyFlatMapThrowing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"NIOCore"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)"},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonemptyFlatMapThrowing"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewValue"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"RangeReplaceableCollection","preciseIdentifier":"s:Sm"}]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"abstract":[{"type":"text","text":"Checks that the future’s value (if any) returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for "},{"code":".isEmpty","type":"codeVoice"},{"type":"text","text":". If the check fails, a new future with"},{"type":"text","text":" "},{"type":"text","text":"an empty array as its value is returned. Otherwise, the provided normal "},{"code":"flatMapThrowing()","type":"codeVoice"},{"type":"text","text":" callback is"},{"type":"text","text":" "},{"type":"text","text":"invoked. The callback’s return type must be an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" or a "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/nonemptyFlatMapThrowing(_:)":{"type":"topic","title":"nonemptyFlatMapThrowing(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonemptyFlatMapThrowing"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewValue"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}],"url":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)","abstract":[{"type":"text","text":"Checks that the future’s value (if any) returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for "},{"code":".isEmpty","type":"codeVoice"},{"type":"text","text":". If the check fails, a new future with"},{"type":"text","text":" "},{"type":"text","text":"an empty array as its value is returned. Otherwise, the provided normal "},{"code":"flatMapThrowing()","type":"codeVoice"},{"type":"text","text":" callback is"},{"type":"text","text":" "},{"type":"text","text":"invoked. The callback’s return type must be an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" or a "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"title":"EventLoopFuture","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"}}}