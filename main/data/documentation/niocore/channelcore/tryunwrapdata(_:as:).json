{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"metadata":{"extendedModule":"NIOCore","modules":[{"name":"NIOCore"}],"symbolKind":"method","roleHeading":"Instance Method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tryUnwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"tryUnwrapData(_:as:)","externalID":"s:7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tryUnwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"data","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type = T.self) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"The content of the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":", or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the type is incorrect."}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"data","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to unwrap."}]}]},{"name":"as","content":[{"inlineContent":[{"type":"text","text":"The type to extract from the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is intended for use when writing custom "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations."},{"type":"text","text":" "},{"type":"text","text":"This can safely be called in methods like "},{"type":"codeVoice","code":"write0"},{"type":"text","text":" to extract data from the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" "},{"type":"text","text":"provided in those cases."}],"type":"paragraph"},{"inlineContent":[{"text":"If the unwrap fails, this will return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". ","type":"text"},{"type":"codeVoice","code":"ChannelCore"},{"text":" implementations should almost","type":"text"},{"text":" ","type":"text"},{"text":"always support only one runtime type, so in general they should avoid using this and prefer","type":"text"},{"text":" ","type":"text"},{"text":"using ","type":"text"},{"type":"codeVoice","code":"unwrapData"},{"text":" instead. This method exists for rare use-cases where tolerating type","type":"text"},{"text":" ","type":"text"},{"text":"mismatches is acceptable.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are implementing a "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":", you should use "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" unless you"},{"type":"text","text":" "},{"type":"text","text":"are doing something "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extremely"}]},{"type":"text","text":" unusual."}]}],"style":"warning","type":"aside"}],"kind":"content"}],"kind":"symbol","abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" as a specific concrete type."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swiftâ€™s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"title":"NIOAny","type":"topic","url":"\/documentation\/niocore\/nioany","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","title":"ChannelCore","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","kind":"symbol","abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"url":"\/documentation\/niocore\/channelcore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/tryUnwrapData(_:as:)":{"role":"symbol","url":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","title":"tryUnwrapData(_:as:)","type":"topic","abstract":[{"text":"Attempts to unwrap the given ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a specific concrete type.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)","kind":"symbol"}}}