{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"The content of the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}]}]},{"kind":"parameters","parameters":[{"name":"data","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" to unwrap."}]}]},{"name":"as","content":[{"type":"paragraph","inlineContent":[{"text":"The type to extract from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"This method is intended for use when writing custom ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" implementations.","type":"text"},{"text":" ","type":"text"},{"text":"This can safely be called in methods like ","type":"text"},{"code":"write0","type":"codeVoice"},{"text":" to extract data from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" ","type":"text"},{"text":"provided in those cases.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Note that if the unwrap fails, this will cause a runtime trap. ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" ","type":"text"},{"text":"implementations should be concrete about what types they support writing. If multiple","type":"text"},{"text":" ","type":"text"},{"text":"types are supported, consider using a tagged union to store the type information like","type":"text"},{"text":" ","type":"text"},{"text":"NIO’s own ","type":"text"},{"code":"IOData","type":"codeVoice"},{"text":", which will minimise the amount of runtime type checking.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"abstract":[{"text":"Unwraps the given ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a specific concrete type.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)","interfaceLanguage":"swift"},"sections":[],"metadata":{"externalID":"s:7NIOCore11ChannelCorePAAE10unwrapData_2asqd__AA6NIOAnyV_qd__mtlF","extendedModule":"NIOCore","title":"unwrapData(_:as:)","role":"symbol","modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}],"symbolKind":"method"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","title":"ChannelCore","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","kind":"symbol","abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"url":"\/documentation\/niocore\/channelcore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/unwrapData(_:as:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"unwrapData(_:as:)","abstract":[{"text":"Unwraps the given ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" as a specific concrete type.","type":"text"}],"url":"\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"title":"NIOAny","type":"topic","url":"\/documentation\/niocore\/nioany","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol"}}}