{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"]}],"abstract":[{"text":"Allocates a buffer that can hold up to ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements and initialise an empty ring backed by","type":"text"},{"text":" ","type":"text"},{"text":"the buffer. When the ring grows to more than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements the buffer will be expanded.","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]}],"metadata":{"externalID":"s:7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","symbolKind":"init","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"title":"init(initialCapacity:)","extendedModule":"NIOCore","roleHeading":"Initializer","modules":[{"name":"NIOCore"}],"role":"symbol"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","type":"topic","role":"collection","url":"\/documentation\/niocore","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/init(initialCapacity:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":")"}],"url":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)","title":"init(initialCapacity:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","type":"topic","abstract":[{"type":"text","text":"Allocates a buffer that can hold up to "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" elements and initialise an empty ring backed by"},{"type":"text","text":" "},{"type":"text","text":"the buffer. When the ring grows to more than "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" elements the buffer will be expanded."}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/circularbuffer","abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, itâ€™s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer"}}}