{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler"},"metadata":{"externalID":"s:7Logging10LogHandlerP","symbolKind":"protocol","navigatorTitle":[{"text":"LogHandler","kind":"identifier"}],"role":"symbol","title":"LogHandler","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"modules":[{"name":"Logging"}]},"kind":"symbol","sections":[],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"],"title":"Conforming Types","type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"]]},"variants":[{"paths":["\/documentation\/logging\/loghandler"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" is an implementation of a logging backend.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"],"title":"Subscripts"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"This type is an implementation detail and should not normally be used, unless implementing your own logging backend.","type":"text"},{"text":" ","type":"text"},{"text":"To use the SwiftLog API, please refer to the documentation of ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":".","type":"text"}],"type":"paragraph"},{"level":1,"text":"Implementation requirements","anchor":"Implementation-requirements","type":"heading"},{"inlineContent":[{"type":"text","text":"To implement your own "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" you should respect a few requirements that are necessary so applications work"},{"type":"text","text":" "},{"type":"text","text":"as expected regardless of the selected "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" implementation."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" must be a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The metadata and "},{"type":"codeVoice","code":"logLevel"},{"type":"text","text":" properties must be implemented so that setting them on a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" does not affect"},{"type":"text","text":" "},{"type":"text","text":"other "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":"s."}],"type":"paragraph"}]}]},{"level":3,"text":"Treat log level & metadata as values","anchor":"Treat-log-level-&-metadata-as-values","type":"heading"},{"inlineContent":[{"type":"text","text":"When developing your "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":", please make sure the following test works."}],"type":"paragraph"},{"code":["LoggingSystem.bootstrap(MyLogHandler.init) \/\/ your LogHandler might have a different bootstrapping step","var logger1 = Logger(label: \"first logger\")","logger1.logLevel = .debug","logger1[metadataKey: \"only-on\"] = \"first\"","","var logger2 = logger1","logger2.logLevel = .error                  \/\/ this must not override `logger1`'s log level","logger2[metadataKey: \"only-on\"] = \"second\" \/\/ this must not override `logger1`'s metadata","","XCTAssertEqual(.debug, logger1.logLevel)","XCTAssertEqual(.error, logger2.logLevel)","XCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])","XCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Special cases","anchor":"Special-cases","type":"heading"},{"inlineContent":[{"text":"In certain special cases, the log level behaving like a value on ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" might not be what you want. For example,","type":"text"},{"text":" ","type":"text"},{"text":"you might want to set the log level across ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":"s to ","type":"text"},{"type":"codeVoice","code":".debug"},{"text":" when say a signal (eg. ","type":"text"},{"type":"codeVoice","code":"SIGUSR1"},{"text":") is received","type":"text"},{"text":" ","type":"text"},{"text":"to be able to debug special failures in production. This special case is acceptable but we urge you to create a","type":"text"},{"text":" ","type":"text"},{"text":"solution specific to your ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"text":" implementation to achieve that. Please find an example implementation of this","type":"text"},{"text":" ","type":"text"},{"text":"behavior below, on reception of the signal you would call","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug"},{"text":", for example.","type":"text"}],"type":"paragraph"},{"code":["import class Foundation.NSLock","","public struct LogHandlerWithGlobalLogLevelOverride: LogHandler {","    \/\/ the static properties hold the globally overridden log level (if overridden)","    private static let overrideLock = NSLock()","    private static var overrideLogLevel: Logger.Level? = nil","","    \/\/ this holds the log level if not overridden","    private var _logLevel: Logger.Level = .info","","    \/\/ metadata storage","    public var metadata: Logger.Metadata = [:]","","    public init(label: String) {","        \/\/ [...]","    }","","    public var logLevel: Logger.Level {","        \/\/ when we get asked for the log level, we check if it was globally overridden or not","        get {","            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel","        }","        \/\/ we set the log level whenever we're asked (note: this might not have an effect if globally","        \/\/ overridden)","        set {","            self._logLevel = newValue","        }","    }","","    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,","                    source: String, file: String, function: String, line: UInt) {","        \/\/ [...]","    }","","    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {","        get {","            return self.metadata[metadataKey]","        }","        set(newValue) {","            self.metadata[metadataKey] = newValue","        }","    }","","    \/\/ this is the function to globally override the log level, it is not part of the `LogHandler` protocol","    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {","        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Please note that the above "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" will still pass the ‘log level is a value’ test above it iff the global log"},{"type":"text","text":" "},{"type":"text","text":"level has not been overridden. And most importantly it passes the requirement listed above: A change to the log"},{"type":"text","text":" "},{"type":"text","text":"level on one "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" should not affect the log level of another "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" variable."}],"type":"paragraph"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/logLevel":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"logLevel"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier","text":"Level"}],"required":true,"kind":"symbol","type":"topic","title":"logLevel","abstract":[{"type":"text","text":"Get or set the configured log level."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","role":"symbol","url":"\/documentation\/logging\/loghandler\/loglevel"},"doc://co.pointfree.VaporRouting/documentation/Logging/StreamLogHandler":{"navigatorTitle":[{"kind":"identifier","text":"StreamLogHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","type":"topic","kind":"symbol","title":"StreamLogHandler","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StreamLogHandler"}],"url":"\/documentation\/logging\/streamloghandler","abstract":[{"type":"codeVoice","code":"StreamLogHandler"},{"type":"text","text":" is a simple implementation of "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" for directing"},{"type":"text","text":" "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" output to either "},{"code":"stderr","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"stdout","type":"codeVoice"},{"text":" via the factory methods.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/subscript(metadataKey:)":{"title":"subscript(metadataKey:)","url":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","abstract":[{"type":"text","text":"Add, remove, or change the logging metadata."}],"required":true,"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"metadataKey"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:SD5Valuea","text":"Value"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"},"doc://co.pointfree.VaporRouting/documentation/ConsoleKit/ConsoleLogger":{"title":"ConsoleLogger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConsoleLogger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","url":"\/documentation\/consolekit\/consolelogger","type":"topic","abstract":[{"type":"text","text":"Outputs logs to a "},{"type":"codeVoice","code":"Console"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ConsoleLogger"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:file:function:line:)-89rya":{"required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","deprecated":true,"type":"topic","url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","defaultImplementations":1,"title":"log(level:message:metadata:file:function:line:)","kind":"symbol","abstract":[{"text":"SwiftLog 1.0 compatibility method. Please do ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" implement, implement","type":"text"},{"text":" ","type":"text"},{"code":"log(level:message:metadata:source:file:function:line:)","type":"codeVoice"},{"text":" instead.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"log"},{"kind":"text","text":"("},{"kind":"externalParam","text":"level"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metadata"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier","text":"Metadata"}],"required":true,"kind":"symbol","type":"topic","title":"metadata","abstract":[{"type":"text","text":"Get or set the entire metadata storage as a dictionary."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata","role":"symbol","url":"\/documentation\/logging\/loghandler\/metadata"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler":{"title":"LogHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler","url":"\/documentation\/logging\/loghandler","type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"LogHandler"},{"text":" is an implementation of a logging backend.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LogHandler"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/MultiplexLogHandler":{"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MultiplexLogHandler"}],"title":"MultiplexLogHandler","url":"\/documentation\/logging\/multiplexloghandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","abstract":[{"type":"text","text":"A pseudo-"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" that can be used to send messages to multiple other "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":"s."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MultiplexLogHandler"}]},"doc://co.pointfree.VaporRouting/documentation/Logging":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging","url":"\/documentation\/logging","role":"collection","abstract":[],"title":"Logging"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:source:file:function:line:)-8kgt7":{"required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","type":"topic","url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","defaultImplementations":1,"title":"log(level:message:metadata:source:file:function:line:)","kind":"symbol","abstract":[{"text":"This method is called when a ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" must emit a log message. There is no need for the ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"check if the ","type":"text"},{"code":"level","type":"codeVoice"},{"text":" is above or below the configured ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"text":" as ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" already performed this check and","type":"text"},{"text":" ","type":"text"},{"text":"determined that a message should be logged.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"log"},{"kind":"text","text":"("},{"kind":"externalParam","text":"level"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/SwiftLogNoOpLogHandler":{"abstract":[{"type":"text","text":"No operation LogHandler, used when no logging is required"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler","navigatorTitle":[{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}],"title":"SwiftLogNoOpLogHandler","url":"\/documentation\/logging\/swiftlognooploghandler"}}}