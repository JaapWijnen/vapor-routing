{"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)"]}],"abstract":[{"type":"text","text":"If available, this method reads one element of type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" out of the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"’s inbound buffer. If the"},{"type":"text","text":" "},{"type":"text","text":"first element was of a different type than requested, "},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"type":"text","text":" will be thrown, if there"},{"type":"text","text":" "},{"type":"text","text":"are no elements in the outbound buffer, "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" will be returned."}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","title":"readInbound(as:)","role":"symbol","externalID":"s:11NIOEmbedded15EmbeddedChannelC11readInbound2asxSgxm_tKlF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readInbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"modules":[{"name":"NIOEmbedded"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readInbound"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data hits the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"’s inbound buffer when data was send through the pipeline using "},{"code":"fireChannelRead","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and then travelled the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" all the way too the back. For data to hit the inbound buffer, the"},{"type":"text","text":" "},{"type":"text","text":"last "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" must have send the event either explicitly (by calling"},{"type":"text","text":" "},{"code":"ChannelHandlerContext.fireChannelRead","type":"codeVoice"},{"type":"text","text":") or implicitly by not implementing "},{"code":"channelRead","type":"codeVoice"},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"type":"text","text":""},{"code":"EmbeddedChannel.writeInbound","type":"codeVoice"},{"type":"text","text":" will fire data through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" using "},{"code":"fireChannelRead","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/readInbound(as:)":{"url":"\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readInbound"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"If available, this method reads one element of type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" out of the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"’s inbound buffer. If the"},{"type":"text","text":" "},{"type":"text","text":"first element was of a different type than requested, "},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"type":"text","text":" will be thrown, if there"},{"type":"text","text":" "},{"type":"text","text":"are no elements in the outbound buffer, "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" will be returned."}],"kind":"symbol","title":"readInbound(as:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","role":"collection","title":"NIOEmbedded","type":"topic","url":"\/documentation\/nioembedded","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"role":"symbol","title":"EmbeddedChannel","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"abstract":[{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"type":"text","text":" "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}]}}}