{"sections":[],"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"finish(acceptAlreadyClosed:)","externalID":"s:11NIOEmbedded15EmbeddedChannelC6finish19acceptAlreadyClosedAC13LeftOverStateOSb_tKF","modules":[{"name":"NIOEmbedded"}],"role":"symbol","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState","kind":"typeIdentifier"}],"symbolKind":"method"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"LeftOverState","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"LeftOverState"},{"text":" of the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":". If all the inbound and outbound events have been","type":"text"},{"text":" ","type":"text"},{"text":"consumed (using ","type":"text"},{"type":"codeVoice","code":"readInbound"},{"text":" \/ ","type":"text"},{"code":"readOutbound","type":"codeVoice"},{"text":") and there are no pending outbound events (unflushed","type":"text"},{"text":" ","type":"text"},{"text":"writes) this will be ","type":"text"},{"code":".clean","type":"codeVoice"},{"text":". If there are any unconsumed inbound, outbound, or pending outbound","type":"text"},{"text":" ","type":"text"},{"text":"events, the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" will returns those as ","type":"text"},{"code":".leftOvers(inbound:outbound:pendingOutbound:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether "},{"code":"finish","type":"codeVoice"},{"type":"text","text":" should throw if the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" has been previously "},{"code":"close","type":"codeVoice"},{"type":"text","text":"d."}]}],"name":"acceptAlreadyClosed"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"Errors in the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" can be consumed using ","type":"text"},{"type":"codeVoice","code":"throwIfErrorCaught"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Synchronously closes the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish(acceptAlreadyClosed:)":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState","kind":"typeIdentifier"}],"title":"finish(acceptAlreadyClosed:)","abstract":[{"text":"Synchronously closes the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":".","type":"text"}],"url":"\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"role":"symbol","title":"EmbeddedChannel","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"abstract":[{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"type":"text","text":" "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","role":"collection","title":"NIOEmbedded","type":"topic","url":"\/documentation\/nioembedded","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"title":"EmbeddedChannel.LeftOverState","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","navigatorTitle":[{"text":"LeftOverState","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LeftOverState","kind":"identifier"}],"type":"topic","abstract":[{"type":"codeVoice","code":"LeftOverState"},{"type":"text","text":" represents any left-over inbound, outbound, and pending outbound events that hit the"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" and were not consumed when "},{"type":"codeVoice","code":"finish"},{"type":"text","text":" was called on the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","kind":"symbol"}}}